[{"body":"Introduction We have made considerable progress on the Interlisp software preservation project, and we want to offer tours and collaboration for those engaged in similar or related software preservation efforts.\nInterlisp was an early and unique software development environment (IDE) developed in the 1970’s and 1980’s at Xerox PARC, and a testbed for novel software development tools. The Medley version of Interlisp-D was built as a portable Virtual Machine, which has allowed us to bring the system forward to run on a wide variety of modern hardware and operating systems.\nInterlisp was also an environment that supported many novel applications, especially in Artificial Intelligence of the 1980s.\nWe are approaching the project as a general software-preservation-through-emulation project, starting with source code. While a “strict emulation” mode is possible, we’ve been focusing on an updated version that fixes some of the compatibility problems with modern hardware (keyboards, mice, etc.) and implements more modern modes of user interaction.\nAccomplishments Advances over the last year include:\nNew versions of “online.interlisp.org” give users a virtual “lisp machine” accessed through the browser without any software to install. New versions of (open source, in GitHub) emulator and VM images with numerous improvements. Support for virtual networking of the Xerox Network Systems (XNS) protocol stack (pre-dating TCP/IP, as well as the “PUP” (PARC Universal Packets). Further work reviving classic Interlisp applications, including Rooms (desktop management), Notecards (Hypertext from the 80s, well before the Web), LOOPS (Lisp Object Oriented Programming System), melding Smalltalk style object inheritance with class-based knowledge engineering tools. Continued integration of Common Lisp standard features with Interlisp development tools. A large (but still unsorted) Zotero library of referenced texts, papers, documents, and presentations. A new expanded Interlisp.Org website that documents the project, software history, goals, contributors, and other components. Additional development of GitHub Interlisp organization and repositories that provide a record of issues, changes, bugs, and fixes. Getting Involved We meet weekly to discuss open issues and other agenda items. Meetings are recorded. We’d like to talk to others who might be interested in collaboration or using our components for other emulation projects.\nContact us at: info@interlisp.org\n","categories":"","description":"","excerpt":"Introduction We have made considerable progress on the Interlisp …","ref":"/news/2022medleyannualreport/","tags":"","title":"2022 Medley Interlisp Annual Report"},{"body":"More background The early development of Interlisp-D during the early development of Smalltalk, with ideas shared both ways. Interlisp-D was launched as a product from Xerox in 1980. It was a base from which AI applications were built, as well as a research project in its own right.\nFor example, Interlisp evolved the notions of structure editing from an interactive “teletype” structure editor, a Display editor (DEdit) to SEDIT. Masterscope and the file manager included system-management tools that combined features of version control and build systems, with comprehensive cross referencing support.\nThe 1970s and 80s saw major advances in computing and Human-Computer interaction. Interlisp was one of the many experimental systems developed during these heady times. It represents and early example of a system with a GUI (Graphical User Interface), and IDE (Integrated Development Environment) and within the Xerox PARC environment, it was an early example of a network enabled machine supporting email, file sharing, printing and more. In essence it was a forerunner of today’s computing systems.\nMedley Medley Interlisp represents the last Xerox Interlisp release. Medley continued Xerox PARC’s experimentation with developing systems for D-machines, a family of computers (Dorado, Dolphin, Dandelion, Daybreak) descended. The project was later spun out to a company called Envos, which then turned into Venue.\nMedley Interlisp User Interface. Restoration Our aim is to restore Medley Interlisp to usability on modern systems, sufficient to allow someone to develop some code and experience what it was like. You could think of this as a kind of “vintage software” project, to try to capture the sense of fluidity in the development cycle.\nWe hope to provide a platform for demonstration of early experiments of hypertext (Notecards), Desktop management (Rooms), Object-oriented programming (LOOPS), as well as Interlisp itself.\nProcess Primarily this is a matter of testing and debugging. Identified issues are documented in the Interlisp/medley repo.\nWe’re also trying to “modernize” some things; for example, we’re adding Unicode support for IO (Interlisp-D was built before Unicode, and supports an older Xerox encoding). As with most open source projects, what we’re able to accomplish depends on volunteers.\nMedley was the last release of the Xerox Lisp environment, before the whole environment was renamed Medley. It was originally written in Interlisp (a dialect separate from the MACLISP/Common Lisp tradition, with its own ancestry), but later, Common Lisp also became part of the environment. Medley includes a WYSIWYG text editor (TEdit), email organizer (Lafite), performance tools (Spy) and many other libraries and user contributed code (from the 1980s).\nThe 1992 ACM Software System Award, to Daniel G. Bobrow, Richard R. Burton, L. Peter Deutsch, Ronald M. Kaplan, Larry Masinter, Warren Teitelman\n… for their pioneering work in programming environments that integrated source-language debuggers, fully compatible integrated interpreter/compiler, automatic change management, structure-based editing, logging facilities, interactive graphics, and analysis/profiling tools in the Interlisp system.\nMore on goals More on ongoing projects More on organization and how you can help More testimonials ","categories":"","description":"","excerpt":"More background The early development of Interlisp-D during the early …","ref":"/about/","tags":"","title":"About"},{"body":"The collection of Interlisp and Lisp related materials can be found at Interlisp Bibliography\n","categories":"","description":"","excerpt":"The collection of Interlisp and Lisp related materials can be found at …","ref":"/publications/zotero/","tags":"","title":"Zotero Bibliography"},{"body":"Agenda 13 Dec 2021 online.interlisp.org – getting to a (0.9) release InterlispOrg Inc – 501c3 approval Agenda 6 Dec 2021 online.interlisp.org Github projects? Agenda 29 Nov 2021 Other Topics?\nmkvdate.c (was on agenda pushed to issue) SDL Releases (medley, maiko, docker) online.interlisp.org Using GitHub projects? Documentation: Book 3, release notes Agenda 22 Nov 2021 Deployment SDL status (Peter) Docker build (Bill) online.interlisp.org (Frank) git/GitHub Medley branch commi push workflow (Ron) Masterscope issue Annual Report feedback (Larry) Agendas 8 \u0026 15 November 2021 We spent both meetings reviewing the Annual Report and Round Table\nAgenda 1 November 2021 NOTE NEW MEETING TIME We should put out a progress report of what we’ve done, new things or soon anticipated. First annual report. In the meeting let’s try Google Docs.\nAgenda 25 October 2021 Too much to talk about – lots is happening all at once.\nSteve has published Interlisp book 2: https://interlisp.org/docs/2021-interlisp-book-2.pdf\nPeter has added support for SDL, a multi-platform (Windows, Mac OS X, Linux, iOS, and Android) X11 replacement, to maiko. SDL can be used instead of X11 as the shim to the native window system, and provides a more native feel.\nAdd prototypical SDL support. by ecraven · Pull Request #403 · Interlisp/maiko\nOpen points to discuss and/or implement:\nMouse button emulation (for systems that have less than three mouse buttons) Scroll bars for the entire lisp window CMake vs. makeright Make lde support dynamically choosing a backend Mouse cursors Warping the mouse cursor Frank has released http://notecards.online using XVnc with saving of your lisp.virtualmem, sources notecards repo\nBill has released new loadup / docker / release automations Medley actions\nRon (wants to) give up on GitHub (maybe); integrating Git with a lisp-based git desktop?\nAgenda 18 Oct 2021 round table: Status \u0026 plans README’s and release notes Distributions Agenda 11 Oct 2021 Documentation (reader’s guide, SK books) Releases and automation Help wanted bugs (#55 eval, MV return stack) Agenda 27 September 2021 Lots of things to talk about, that might require some preparation\nLet’s start with (5 min each max) round-table. Then 15 minutes each on plan for review\nDocumentation: what we have (Wiki list, PDFs, Interlisp.org site) what we’re working on (SK) What we need (Documentation issues, bibliography) Subrs and opcode survey Unicode plans (internal and external encodings) Releases and distributions Agenda 20 September 2021 Round-table. Save for last:\nBACKGROUND-YIELD -\u003e liapusers (for now) Releases no commit of loadups =\u003e need loadups-only release (dribble files? need copyall?) Interlisp/DOS Agenda 13 September 21 Interlisp Org Inc status, Q\u0026A Zotero (Herb?) Releases (Bill?) welcome Peter Envos files Fonts progress LispUsers Agenda 6 September 2021 Labor Day (US Holiday); attendance uncertain. Let’s do a “round table” of brief status reports.\nInterlisp.Org Inc – progress Zotero bibliography Releases Documentation - FAQ? Fonts (sigh) Agenda 30 August 2021 loadups, releases, GitHub automation, Notecards configuration Agenda 23 August 2021 Review of Ongoing Projects before we dive into other topics, including:\n*.TEDIT to PDF for all medley / envos repos envos repo reorg / undo cr/lf transform tests and benchmarks Agenda 16 August 2021 Round table news Tracking down bug 407 Agenda 9 August 2021 Notecards in the Cloud with Docker (@fhalasz) Recent merges Unicode external format changes Bye-bye old versions in repo (not entirely) Docker and actions Reviewing open Issues Testing strategy Organizational partners Agenda 2 August 2021 Testing – how to make test cases for changes Git commit quality and separability Recent PR merges maintenance workflow Simplify process of obtaining new releases (mjd) Agenda 26 July 2021 DOSBox / uploads Ron’s IO changes /Interlisp/medley/pull/348 Project goals \u0026 bylaws (TBA) Agenda 19 July 2021 • 30 minutes topics important for filing for 501c3 articles of incorporation\nbrainstorming a list of possible organizational goals. I imagine this as a “brainstorming” session where we collect ideas. It’s important to have a broad purpose statement to allow flexibility but specific enough to attract volunteers and donations. Consolidation, evaluation, and pruning will come later. The ideas should be expressed in terms suitable for filing for non-profit status. See Medley Interlisp Goals and Ongoing Projects for inspiration. Av list of ideas for the organization name. I will record the session but it would be wonderful if someone could take notes (setting up a google document we all could connect to)\n• 30 minutes round table: status, plans, blockers\nAgenda 12 July 2021 I’d like to talk about overall project goals in relationship to Ongoing Projects\nAgenda 5 July 2021 Ongoing Projects in reverse order\nAgenda 28 Jun 2021 I’d like some feedback on Project Organization. My hope is to use this organization to drive the agenda.\nAgenda 21 Jun 2021 Usual round-table status and plans\nAgenda 14 Jun 2021 some topics to touch base on\nDocker (Herb) Notecards demo (Frank?) Medley 2.0 on DOSBox (Arun?) Space and versions and file name case (Bill? Larry) EOL convention problems with DFASLs? (Ron?) Meeting recordings available to LispCore for 2 weeks Agenda 7 June 2021 Introductions (if invitees can make it) Docker (Herb) Topic “Notecards Demo” running old sysouts with DarkStar running old sysouls with Medley 2.0 on DosBox recompiling and loadup with modern medley “International Keyboard Support” “Zotero Interlisp bibliography” Working with Fiverr git-versions GitHub space plan Agenda 24 May 2021 Usual round table, hoping to include topics:\nDocker plans (Herb) Filter GitHub for big files; use GitHub LFS; or both (? Bill) Running in Windows? (Steve) Starting an Interlisp non-profit (Larry) Stack overflow bug? Notes 17 May 2021 These are rough notes from the meeting. I regularly record the meetings for private consumption.\nLet me ask each of the attendees, your decision on the question of what to do: stop recording, available to LispCore members, available public, available on request. I want to respect everyone’s conditions, and would like an explicit ack. I’ll summarize before acting. Reducing git repo size (Bill Stumbo) We decided “one change at a time” even if it causes multiple force push, and invalidates forked repos (There were a small number.) If the forkers can cope once, they can prepare for the second time). Bill will test his filter on a fork/copy and make sure it has the desired effect. Steve was still having problems running WSL2 on Windows. Windows 10 Home vs. Windows 10 pro. We should resurrect the original instructions for running on Oracle Virtualbox or VmWare. Making progress on INTERLISP volume 2. Bibliography progress (Abe) Abe showed off the Bibliography and advanced features on Zotero.org. There’s a search feature but it’s buggy. (The implementation is in the GitHub Interlisp/interlisp.github.io repository. I think Issues with the website and bibliography could just use Medley issues with tag “Documentation”. Herb talked about the Docker and automation issues he was going to reverse inherit from Abe. Character IO changes (Ron) Ron described his progress. Versions from git (Larry) I demoed a ‘proof of concept’ for pulling old versions from git. I’ll keep you posted Notecards Demo (Arun, Frank Halasz(?)) stack overflow multiple value return bug\nNick and I talked over the fine details of who does what to the stack and why. The conjecture is this isn’t a new bug, just a fault that was rare. John Vittal, Arun Welch, Abe Jellinek, Herb Jellinek, Larry Masinter, Bill Stumbo, Nick Briggs, Ron Kaplan, John Cowan, Steve Kaisler, Michele Denber\nAgenda 10 May 2021 Round Table Changing character encoding default (Ron) The stack overflow debugging techniques (as a “case study”) Agenda 3 May 2021 After trying other alternatives, I’m coming back to using the Wiki for agendas\nit’s easy to find (not getting lost) Anyone can update easily This week, we will (hopefully) see John Vittal and Steve Kaisler (who joined us last Monday)\nIntroductions \u0026 usual ‘round table’. Topic suggestions John Vittal welcome Steve Kaisler’s Interlisp book and Volume II plans (Any success loading release?) Bibliography (Abe) EOL change in sources (Ron) Lispusers (Herb?) Other topics if there’s time Loadups, releases defaults for printing Agenda 8 March 2021 As usual, what have you been up to? (Status and Plans) Making releases: Visibility workflow on duplicate function removal (how to make each a PR) Agemda 22 Feb 2021 Topics I have for tomorrow\nExperimenting with loading all of sysfiles Cleaning out “dead wood” in the Lisp code regular features:\nrecent bug reports round table Agenda 15 Feb 21 Round table news \u0026 plans Configuration vs. Documentation (Masterscope \u0026 DInfo, Match, fonts) making the init and loadup review reviewing the PR #187 debugging and analysis techniques meeting recorded but available for 1 week on request\nAgenda 25 Jan 2021 Recent documentation updates (READMEs, Wiki) and plans Pinning CPU experiments MEDLEY-UTILS Common Lisp / Interlisp priorities ","categories":"","description":"","excerpt":"Agenda 13 Dec 2021 online.interlisp.org – getting to a (0.9) release …","ref":"/about/getinvolved/2021meetings/","tags":"","title":"2021 Meeting Agendas and Notes"},{"body":"This is a placeholder for gathering information about what’s changed between Medley 2.0 (the last “official” release) and current Medley. Can we get to the point where release notes are built from commit messages?\ncaps lock default\nExplicit encoding :format, unicode support\ndefault hex in printcode\nFilebrowser\nfiling.enumeration.depth for DSK\n…\n","categories":"","description":"","excerpt":"This is a placeholder for gathering information about what’s changed …","ref":"/docs/medley/modern-medley-release-notes/","tags":"","title":"Modern Medley Release Notes"},{"body":"(needs update 9/15/22 lmm; this was from 11/2021)\nThese should represent all tasks that people have volunteered for, and link them to issues or discussions and overall project goals.\nIf there are things missing, please add them (and submit issues as needed).\nmaiko issues Stack overflow mv return bug issue #19 running without interrupt on X issue #103 running without CPU pinning issue #33 Release environment In browser via cloud / Xarc native windows run in a browser with WebASM Issue #40 bigger screen bitmap Issue #39 international keyboards Issue #334 Release automation Issues #177, #266, #300 and PR #233 GitHub actions Docker Older Interlisp \u0026 Medley DarkStar DOSBox Interlisp-10 Versions \u0026 file naming in repo Issue #265, Issue #226 EOL default Issue #2 Unicode (see rmk 6/28/2021 0:30) Issue 313 and Issue#100 Modern fonts Repo size Discussion #102 CLtL2/ANSI Issue #5 Discussion #280 Lispusers \u0026 applications Issue #7 notecards loops rooms documentation book wiki - getting started bibliography Issue #299, Issue #339 Ongoing Review issues, prs organizational recruiting, communication ","categories":"","description":"","excerpt":"(needs update 9/15/22 lmm; this was from 11/2021)\nThese should …","ref":"/about/ongoingprojects/","tags":"","title":"Ongoing Projects"},{"body":"Some very basics – enough to get you to find the Medley User’s Guide of ~30 years ago.\nInterlisp Interlisp is a dialect of Lisp and as such, it is based on the familiar syntax of left-parenthesis, function name, arguments, and right-parenthesis. Besides many of the functions having different names and arguments compared to Common Lisp, Interlisp has many other, more fundamental, differences from Common Lisp. While this section will not go into any of the functional differences between Interlisp and Common Lisp, it will attempt to detail the more fundamental differences between the two. The reference manual may be used for a detailed description of the Interlisp functions.\nUpper- and Lower Case Interlisp uses mixed case. That is, upper-case letters and lower-case letters are treated as different. This means you can have a variable name my-var and a variable named MY-VAR that are unique and unrelated to each other. This is true for Common Lisp too, but the READ function in Common Lisp translates.\nMost Interlisp primitives are upper case.\nAs a side note, the Medley system includes a package called DWIM (Do What I Mean). This system reads in what you type and attempts to automatically correct input errors. At times, in an effort to correct typing errors this system will auto-convert something you type in lowercase into uppercase. Thus it may appear that the case doesn’t matter - but it does.\nVariables Except for Special Variables, variables in Common Lisp are lexically scoped. This means that local variables are only visible within the scope they are defined. This means, among other things, that variables defined in one function are not visible to other functions.\nIn functions that are running interpretively (as opposed to having been compiled), variables in Interlisp are dynamically scoped. This means that variables are visible within the dynamic environment they are in. For example, let’s say we create two functions FUN1 and FUN2. If FUN1 introduced a local variable and then called FUN2, then FUN2 would have access to the variable since it is in the dynamic environment of being called by FUN1. In other words, the variable was in existence when FUN2 was called. However, the Interlisp compiler “hides” variables unless they are “declared special”, so that they are essentially lexically scoped, as in Common Lisp.\nCommon Lisp also supports dynamic variables as well. They are called the Special Variables.\nLISP-2 Like Common Lisp but unlike Scheme, Interlisp is a LISP-2 language. This means, in part, that the namespace for variables is separate from the namespace for functions. For example, in Interlisp and Common Lisp, you can simultaneously have a variable named ABC and a function named ABC that are unrelated.\nLAMBDA \u0026 NLAMBDA \u0026 CL:LAMBDA Interlisp shares the notion of LAMBDA expressions with Common Lisp, as a way of defining functions. Interlisp LAMBDA specifies a list of parameters; Common Lisp parameter lists can be decorated with \u0026OPTIONAL, \u0026REST and \u0026KEYWORD parameters. Interlisp also adds the notion of an NLAMBDA function that doesn’t evaluate its arguments – arguments to NLAMBDA function are passed directly into a function without being evaluated.\nInterlisp supports spread and no-spread lambda arguments similar to Common Lisp. However, Interlisp treats all arguments as optional (if not provided they default to NIL) and ignores extra arguments (no warning or error is raised).\nMacros Interlisp supports macros but unlike Common Lisp, Interlisp symbols may simultaneously have a function definition and a macro definition. If a symbol has both a function definition and a macro definition, the function definition is used by the interpreter and the macro is used by the compiler. This allows for extra error checking during development and fast operation during production use.\nInterlisp also has a backquote facility similar to Common Lisp’s ` and , read macros.\nUnlike Common Lisp, Interlisp does not have a special function for defining macros. Macros are defined by placing their definition on the property list of the symbol.\nMedley Common Lisp The term “Common Lisp” covers a range of development stages, first defined by the book “Common Lisp, the Language” editions 1 (aka CLtL1) and 2 (aka CLtL2) and ultimately the ANSI Standard Common Lisp (aka ANSI). The Common Lisp currently supported by Medley is somewhere between CLtl1 and CLtl2. We are hoping to complete the move to CLtl2.\nIn Medley Common Lisp and Interlisp are fully integrated. From within Common Lisp, Interlisp functions may be accessed through the Common Lisp package nicknamed ``IL’'.\nContinuing On This introduction was designed to provide the most general of information – just enough to get you started. Medley comes with extensive documentation.\nIn searchable PDF and (imperfect) HTML:\n(1991) Sun User Guide (1992) Medley for the Novice (1993) Interlisp Reference Manual Medley Interlisp also includes an online reference:\nright-click on the desktop to get to the system menu select DInfo or, at any prompt, the man command will look up an (Interlisp) symbol.\nMany thanks to Blake McBride and his Medley Intro from which this was initially taken.\n","categories":"","description":"","excerpt":"Some very basics – enough to get you to find the Medley User’s Guide …","ref":"/doc/info/Using.html","tags":"","title":"The Basics of Interlisp"},{"body":"Medley Interlisp is open-source and may be obtained from GitHub. It is portable to many different Linux and Apple MacOS systems, as well as Windows using WSL2.\nThe core is written in portable C. The system currently depends on an X11 system for its display.\nObtaining The System The system comes in two parts. The first is a C-based virtual machine maiko.\nThe remainder of the system is OS / architecture-independent and can be found in the medley repository.\nYou can now download Medley Interlisp from a release without building anything; see medley README\nSee The Maiko README for build instructions for Maiko, for systems for which there is no pre-built release.\n","categories":"","description":"","excerpt":"Medley Interlisp is open-source and may be obtained from GitHub. It is …","ref":"/running/build/building/","tags":"","title":"Building Medley Interlisp"},{"body":"Interlisp Bibliography The following table represents a snapshot of the information captured in the Interlisp Zotero library.\nAuthor Title Notes 1963 Slagle, James R. A Heuristic Program that Solves Symbolic Integration Problems in Freshman Calculus 1965 Deutsch, L. Peter Lampson, Butler W. 930 LISP Reference Manual 1966 Berkeley, Edmund Callis Bobrow, Daniel Gureasko The programming language LISP: Its operation and applications Bobrow, Daniel G. Murphy, Daniel L. THE STRUCTURE OF A LISP SYSTEM USING TWO-LEVEL STORAGE, SCIENTIFIC REPROT Section: Technical Reports Bobrow, Daniel G. Teitelman, Warren Format-directed list processing in LISP Daniel G. Bobrow Daniel L. Murphy Preliminary Specification for BBN 940 LISP 1967 Bobrow, Daniel G. Darley, D. Lucille Deutsch, L. Peter Murphy, Daniel L. Teitelman, Warren THE BBN 940 LISP SYSTEM Section: Technical Reports Teitelman, Warren DESIGN AND IMPLEMENTATION OF FLIP, A LISP FORMAT DIRECTED LIST PROCESSOR Section: Technical Reports Bobrow, Daniel G. Murphy, Daniel L. Structure of a LISP system using two-level storage: Communications of the ACM Teitelman, Warren Recent Improvements to 940 LISP Library Daniel G. Bobrow D. Lucille Darley L. Peter Deutsch Daniel L. Murphy Warren Teitelman The BBN-LISP System 1968 Bobrow, Daniel G. Murphy, Daniel L. A note on the efficiency of a LISP computation in a paged machine 1969 The BBN-LISP system: Reference Manual Bobrow, D. G. LISP bulletin 1971 Teitelman, W. Bobrow, D. G. Hartley, A. K. Murphy, D. L. BBN - LISP, TENEX Reference Manual 1972 J778.SYSREM DOC on SYS05 (LISP features dsigned to aid the LISP programmer) Catalog Number: 102721861 Category: Program Listing Collection Title: Gift of Larry Masinter Credit: Gift of Larry Masinter Teitelman, W. Bobrow, D. G. Hartley, A. K. Murphy, D. L. BBN - LISP, TENEX Reference Manual, Revised Teitelman, Warren Automated programmering: the programmer's assistant 1973 Reboh, Rene Sacerdoti, Earl A Preliminary QLISP Manual Section: Technical Reports Bobrow, Daniel G. Wegbreit, Ben A model and stack implementation of multiple environments Deutsch, L. Peter A LISP machine with very compact programs Teitelman, Warren INTERLISP Deutsch, L. Peter An interactive program verifier 1974 Teitelman, Warren INTERLISP documentation Deutsch, P. Display primitives in Lisp 1975 Anders Haraidson LISP-details INTERLlSP / 360 - 370 Weyl, Stephen An Interlisp Relational Data Base System. Section: Technical Reports Bobrow, Daniel G. A note on hash linking Deutsch, L. Peter PIVOT source listing Deutsch, P. Status Report on Alto Lisp 1976 Clark, Douglas W. List Structure: Measurements, Algorithms, and Encodings Moore, J. Strother The Interlisp Virtual Machine Specification Sacerdoti, Earl D. Fikes, Richard E. Reboh, Rene Sagalowicz, Daniel Waldinger, Richard J. Wilber, B. Michael Qlisp: a language for the interactive development of complex systems Bobrow, Robert Grignetti, Mario Interlisp performance measurements Teitelman, W. Proposal for Research on Interlisp and Network-Based Systems Section: Technical Reports Deutsch, L. Peter Bobrow, Daniel G. An efficient, incremental, automatic garbage collector Teitelman, Warren Clisp: Conversational Lisp Conference Name: IEEE Transactions on Computers Masinter, Larry PARCMESSAGE.TXT.1. 1977 Teitelman, Warren A display oriented programmer's assistant Burton, Richard R. Semantic grammar: an engineering technique for constructing natural language understanding systems Sproull, Robert F. INTERLISP DISPLAY PRIMITIVES 1978 Fiala, E. R. The Maxc Systems Publisher: Institute of Electrical and Electronics Engineers Report Number: 11 Fatcat ID: release_q5bn52bkmvgfnfpyj3fa6wfnzy Brachman, Ronald Ciccarelli, Eugene Greenfeld, Norton Yonke, Martin KLONE Reference Manual: DOI: 10.21236/ADA122437 Deutsch, L. Peter Experience with a microprogrammed Interlisp system Deutsch, L. Peter INSIDE INTERLISP: TWO IMPLEMENTATIONS 1979 Teitelman, Warren Kaplan, Ron new-lisp-messages.txt.1. Sproull, Robert F. Raster graphics for interactive programming environments Bobrow, Daniel G. Deutsch, L. Peter Extending Interlisp for modularization and efficiency Teitelman, Warren A display oriented programmer's assistant Moore, J. Strother The INTERLISP Virtual Machine Specification: Revised Bobrow, Daniel G. Clark, Douglas W. Compact Encodings of List Structure 1980 Kaplan, Ronald M. Sheil, B. A. Adding Type Declarations to Interlisp. Koomen, Johannes A. G. M. The interlisp virtual machine: study of its design and its implementation as multilisp DOI: 10.14288/1.0051801 Masinter, Larry Melvin Global Program Analysis in an Interactive Envi ronment by Larry Melvin Masinter SSL.80-1 JANUARY 1980 Masinter, Larry M. Deutsch, L. Peter Local optimization in a compiler for stack-based Lisp machines Deutsch, L. Peter ByteLisp and its Alto implementation Burton, Richard R. Masinter, L. M. Bobrow, Daniel G. Haugeland, Willie Sue Kaplan, Ronald M. Sheil, B. A. Overview and status of DoradoLisp Brachman, Ronald J. Smith, Brian C. Special issue on knowledge representation Burton, Richard R. Kaplan, Ronald M. Masinter, B. Sheil, B. A. Bell, A. Bobrow, D. G. Deutsch, L. P. Haugeland, W. S. Papers on interlisp-D 1981 Moore, J. Strother The TXDT Package-Interlisp Text Editing Primitives Davis, Randall Austin, Howard Carlbom, Ingrid Frawley, Bud Pruchnik, Paul Sneiderman, Rich Gilreath, J. The DIPMETER ADVISOR: Interpretation of Geologic Signals. Teitelman, W. Masinter, L. The Interlisp Programming Environment Publisher: IEEE Computer Society Masinter, Larry M. Interlisp-VAX: A Report Barstow, David R. Overview of a display-oriented editor for INTERLISP Sheil, Beau Interlisp-D: further steps in the flight from time-sharing 1982 Finin, Tim Translating KL-One from interlisp to Franzlisp Bates, Raymond L. Dyer, David Koomen, Johannes A. G. M. Implementation of Interlisp on the VAX Bates, Raymond David, Dayer Koomen, Johannes Saunders, Steven Voreck, Donald Interlisp-VAX Users Manual 1983 Stefik, Mark Bobrow, Daniel G The LOOPS Manual Stefik, Mark Bobrow, Daniel G Mittal, Sanjay Conway, Lynn KNOWLEDGE PROGRAMMING IN LOOPS: Stefik, Mark Bobrow, Daniel G Mittal, Sanjay Conway, Lynn KNOWLEDGE PROGRAMMING IN LOOPS: Novak, Jr, Gordon S. GLISP: A Lisp-based Programming System with Data Abstraction Truckin’ and the Knowledge Competitions | MJSBlog Michael Sannella Interlisp reference manual: Revised OCLC: 11098633 Stefik, Mark Bobrow, Daniel G Mittal, Sanjay Conway, Lynn KNOWLEDGE PROGRAMMING IN LOOPS: Schrag, Robert C. Notes on the Conversion of LogLisp from Rutgers/UCI-Lisp to InterLisp, Section: Technical Reports Naraln, Sanjai McArthur, David Klahr, Philip Large-scale system development in several lisp environments Xerox Interlisp reference manual OCLC: 802551877 Becker, Jeffrey M. AQINTERLISP: An INTERLISP Program for Inductive Generalization of VL1 Event Sets 1984 Bundy, Alan Wallen, Lincoln Interlisp-D DOI: 10.1007/978-3-642-96868-6_103 Smith, Reid G. On the Development of Commercial Expert Systems Number: 3 Bates, Raymond L. Dyer, David Feber, Mark Recent developments in ISI-interlisp 1985 Gabriel, Richard P. Performance and evaluation of LISP systems Lenat, Douglas B. Prakash, Mayank Shepherd, Mary CYC: Using common sense knowledge to overcome brittleness and knowledge acquisition bottlenecks Fletcher, Charles R. Understanding and solving arithmetic word problems: A computer simulation XEROX 1985 Harmony and Intermezzo releases Koto release (for Xerox 1186), some bits of Common Lisp Anonymous Koto INTERLISP-D RELEASE NOTES Anonymous Koto INTERLISP-D RELEASE NOTES Lehtola, A. Jäppinen, H. Nelimarkka, E. Language-based environment for natural language parsing Interlisp-D Reference Manual, Volume III: Input/Output OCLC: 802551877 Interlisp-D Reference Manual, Volume II: Environment OCLC: 802551877 Interlisp-D Reference Manual, Volume I: Language OCLC: 802551877 Interlisp-D Reference Manual, Volume III: Input/Output OCLC: 802551877 Interlisp-D Reference Manual, Volume II: Environment OCLC: 802551877 Interlisp-D Reference Manual, Volume I: Language OCLC: 802551877 Burwell, A. D. M. Computer manipulation of geological exploration data 1986 Adeli, H. Paek, Y. J. Computer-aided analysis of structures in INTERLISP environment Stephen H. Kaisler INTERLISP The Language And Its Usage Martz, Philip R. Heffron, Matt Griffith, Owen Mitch An Expert System for Optimizing Ultracentrifugation Runs Section: 23 DOI: 10.1021/bk-1986-0306.ch023 Henderson, D. Austin Jr. Card, Stuart K. Rooms: The Use of Multiple Virtual Workspaces to Reduce Space Contention in a Window-Based Graphical User Interface Henderson, D. A. The Trillium user interface design environment Trigg, Randall H. Suchman, Lucy A. Halasz, Frank G. Supporting collaboration in notecards Sheil, Beau POWER TOOLS FOR PROGRAMMERS DOI: 10.1016/B978-0-934613-12-5.50048-3 Bobrow, Daniel G. Kahn, Kenneth Kiczales, Gregor Masinter, Larry Stefik, Mark Zdybel, Frank CommonLoops: merging Lisp and object-oriented programming Bobrow, Daniel G. Kahn, Kenneth Kiczales, Gregor Masinter, Larry Stefik, Mark Zdybel, Frank CommonLoops: merging Lisp and object-oriented programming Halasz, Frank G. Moran, Thomas P. Trigg, Randall H. Notecards in a nutshell Xerox Artificial Intelligence Systems, Interlisp-D: A Friendly Primer 1987 Stone, Jeffrey The AAAI-86 Conference Exhibits: New Directions for Commercial Artificial Intelligence Cunningham, Robert E. Corbett, John D. Bonar, Jeffrey G. Chips: A Tool for Developing Software Interfaces Interactively. Section: Technical Reports Shanor, Gordy G. The Dipmeter Advisor - A dipmeter interpretation workstation Gladwin, Lee A. Review of Interlisp: The Language and Its Usage Publisher: IEEE Computer Society Myers, J. D. The background of INTERNIST I and QMR Anonymous XEROX COMMON LISP IMPLEMENTATION NOTES Mears, Lyn Ann Rees, Ted Artificial intelligence Systems Xerox LOOPS, A Friendly Primer Mears, Lyn Ann Rees, Ted Artificial intelligence Systems Xerox LOOPS, A Friendly Primer Trigg, Randall H. Irish, Peggy M. Hypertext habitats: experiences of writers in NoteCards 1988 Shaw, Mildred L. An interactive knowledge-based system for group problem solving Place: US Publisher: Institute of Electrical \u0026 Electronics Engineers Inc Shaw, Mildred L. An interactive knowledge-based system for group problem solving Place: US Publisher: Institute of Electrical \u0026 Electronics Engineers Inc Koschmann, T. Evens, M.W. Bridging the gap between object-oriented and logic programming Halasz, Frank,G. Reflections on NoteCards: seven issues for the next generation of hypermedia systems 1989 Martz, Philip R. Heffron, Matt Kalbag, Suresh Dyckes, Douglas F. Voelker, Paul The PepPro™ Peptide Synthesis Expert System 1990 Lipkis, Thomas A. Mark, William S. Pirtle, Melvin W. Design system using visual language Experience, World Leaders in Research-Based User Hypertext'89 Trip Report: Article by Jakob Nielsen 1991 Balban, Morton S. Lan, Ming-Shong Panos, Rodney M. Method of and apparatus for composing a press imposition Henderson, D. Austin Card, Stuart K. Maxwell, John T. User interface with multiple workspaces for sharing display system objects Cunningham, Robert E. Bonar, Jeffery G. Corbett, John D. Interactive method of developing software interfaces Newman, William Eldridge, Margery Lamming, Michael PEPYS: Generating Autobiographies by Automatic Tracking 1992 Denber, Michel J. Graphics display system with improved dynamic menu selection Smith, Reid G. Schoen, Eric J. Object-oriented framework for menu definition Rao, Ramana B. Window system with independently replaceable window functionality Lee, Alison Investigations into history tools for user support Kurlander, David Feiner, Steven Interactive constraint-based search and replace 1993 Denber, Michel J. Jankowski, Henry P. Method and apparatus for thinning printed images FAQ: Lisp Implementations and Mailing Lists 4/7 [Monthly posting] - [4-1] Commercial Common Lisp implementations. Wiil, Uffe K. Leggett, John J. Hyperform: using extensibility to develop dynamic, open, and distributed hypertext systems Boyd, Mickey R. Whalley, David B. Isolation and analysis of optimization errors 1994 Jan O. Pedersen Per-Kristian Halvorsen Douglass R. Cutting John W. Tukey Eric A. Bier Daniel G. Bobrow Iterative technique for phrase query formation and an information retrieval... Kaplan, Ronald M. Maxwell, John T. III Text-compression technique using frequency-ordered array of word-number mappers 1995 Kaplan, Ronald M. Kay, Martin Maxwell, John Finite state machine data storage where data transition is accomplished without the use of pointers Rao, Ramana Pedersen, Jan O. Hearst, Marti A. Mackinlay, Jock D. Card, Stuart K. Masinter, Larry Halvorsen, Per-Kristian Robertson, George C. Rich interaction in the digital library Anderson, Kenneth R. Freeing the essence of a computation Pitman, Kent M. Ambitious evaluation: a new reading of an old issue 1996 Tavani, Herman T. Cyberethics and the future of computing 1998 Malone, Thomas W. Lai, Kum-Yew Yu, Keh-Chiang Berenson, Richard W. Object-oriented computer user interface Nunberg, Geoffrey D. Stansbury, Tayloe H. Abbott, Curtis Smith, Brian C. Method for manipulating digital text data Mackinlay, Jock D. Card, Stuart K. Robertson, George G. Image display systems Ehrlich, Kate A conversation with Austin Henderson 2001 Affenzeller, Michael Pichler, Franz Mittelmann, Rudolf On CAST.FSM Computation of Hierarchical Multi-layer Networks of Automata Series Title: Lecture Notes in Computer Science DOI: 10.1007/3-540-45654-6_3 2003 Bobrow, Daniel Mittal, Sanjay Lanning, Stanley Stefik, Mark Programming Languages -- The LOOPS Project (1982-1986) Bobrow, Daniel Mittal, Sanjay Lanning, Stanley Stefik, Mark Programming Languages -- The LOOPS Project (1982-1986) Bobrow, Daniel Mittal, Sanjay Lanning, Stanley Stefik, Mark Programming Languages -- The LOOPS Project (1982-1986) 2006 Kossow, Al PDP-10 software archive 2007 Karttunen, Lauri Word play 2008 Lisp50 Notes part V: Interlisp, PARC, and the Common Lisp Consolidation Wars Teitelman, Warren History of Interlisp 2010 Jill Marci Sybalsky Medley 2011 Mark Stefik The Colab Movie (1987) Mark Stefik Truckin Knowledge Competition (1983) 2012 Oldford, Wayne Graphical Programming (1988) - Part 0 Oldford, Wayne Graphical Programming (1988) - Parts 1 and 2 Computer-Assisted Instruction (Bits and Bytes, Episode 7) 2015 Murphy, Dan TENEX and TOPS-20 Publisher: IEEE Rosenthal, David S.H. Emulation \u0026 Virtualization as Preservation Strategies 2017 Lisp Editing in the 80s - Interlisp SEdit DeKleer, Johann Daniel G. Bobrow: In Memoriam Publisher: Association for the Advancement of Artificial Intelligence (AAAI) Report Number: 38 Fatcat ID: release_wg4g7ikocbagxinabbk2eni52q Masinter, Larry Interlisp-D at AAAI-82 2019 Barela, Anne Introducing Darkstar: A Xerox Star Emulator Bouvin, Niels Olof From NoteCards to Notebooks: There and Back Again Bouvin, Niels Olof From NoteCards to Notebooks: There and Back Again 2020 Attendees | Larry Masinter, The Medley Interlisp Project: Status and Plans | Meetup Introducing the Smalltalk Zoo Section: Software History Center Museum+Labs, Living Computers: livingcomputermuseum/Darkstar original-date: 2019-01-15T20:40:02Z 2021 Malone, Thomas W. The Information Lens Dipmeter Advisor Page Version ID: 1060421060 Interlisp Cardoso-Llach, Daniel Kaltman, Eric Erdolu, Emek Furste, Zachary An Archive of Interfaces: Exploring the Potential of Emulation for Software Research, Pedagogy, and Design Undated 1982-Bobrow-Stefik-Data-Object-Pgming.pdf 1986-commonloops-oopsla66.pdf 1979-stefik-examination-of-frame-structured.pdf 1987-Themes-Variations-Stefik-Loops-.pdf 1986-access-oriented.pdf ED285570.pdf xerox1108.pdf CSL-77-3_A_Display_Oriented_Programmers_Assistant.pdf CSL-79-6_Raster_Graphics_for_Interactive_Programming_Environments.pdf ahc_20150101_jan_2015.pdf Truckin’ and the Knowledge Competitions | MJSBlog Bobrow, G Stefik, J Perspectives on Artificial Intelligence Programming Bobrow, G Stefik, J Perspectives on Artificial Intelligence Programming Foster, Gregg CoLab, Tools for Computer Based Cooperation NOTES ON XEROX LISP MACH DEMO Xerox_Globalview_Document_Services_for_Sun_Technical_Reference_Manual_Jun92.pdf Xerox Alto Emulator Lisp and Symbolic Computation ","categories":"","description":"","excerpt":"Interlisp Bibliography The following table represents a snapshot of …","ref":"/publications/table/","tags":"","title":"Bibliography"},{"body":"Once the system has been started, you will see some windows with title bars. Navigation within the system is a little unusual. To control a window, right-click on the window’s title bar. To bring up a system menu, right-click anywhere outside a window.\nWindows titled “Exec” work as read-eval-print loops with the addition of extensive “commands”. There are four different contexts, determined by the default “package” and “readtable”. The “package” of a window determines which (Common Lisp) package is the default while the “readtable” controls whether typing is treated as case sensitive or not.\nThe title bar will also tell you whether you are running LISP (for Common Lisp), XCL (for Xerox Common Lisp), INTERLISP (for current Interlisp), or OLD-INTERLISP-T (for an older version of Interlisp).\nWhen the system first comes up you will notice a window labeled “Exec (XCL)”. This works as a Common Lisp read-eval-print loop.\n(Hint: When the system has completed its initialization process, a fresh prompt will appear.)\nDifferent Lisp Environments The system comes with four versions of “Exec”:\nInterlisp: Package: Interlisp, Readtable: a hybrid, case sensitive environment. Most Interlisp functions are all caps, so use of the SHIFT LOCK is recommended. Old Interlisp: The same Interlisp package, but an older readtable (where “:” isn’t a package delimiter) Common Lisp: Package: USER (need to check) XCL: (eXtended Common Lisp) Common Lisp with a number of extensions. Even though each of the possible Exec’s gives a default environment, all of the various Lisp functions and variables are interchangeably available from any of the Exec windows via package specifications. For example, an Interlisp function names ABC may be run from Common Lisp via (IL:ABC ...). Likewise, a Common Lisp function DEF may be executed from Interlisp via (CL:DEF ...).\nImages And Files The Medley system includes a virtual machine (VM) that runs the Lisp programs. Medley can run Lisp code interpreted or compiled into the byte-code for the Medley VM. This is a bit similar to the Java Virtual Machine or the .NET CLR or Smalltalk.\nIn traditional systems, a developer edits source code files and then compiles those files into something the machine can execute — be it a machine executable file or byte-code for a VM. Medley does not work that way. Medley is an image-based system similar to Smalltalk or Squeak.\nWhen Medley is started up, you are in the development and runtime environment. All of your development is done here and all of your programs are run here. You are essentially editing runnable programs in memory. When you exit the system, Medley creates a backup of this memory onto what is called a SYSOUT (or lisp.virtualmem). When the system is started up again, this image is read into memory and the system picks up right where it left off. This is what is called an image-based development environment.\nIn Medley, programs are developed, edited, debugged, and run all from within Medley. The state of this development is saved in your image file. There is also a way to save your system to more traditional disk files. This is called the ``File Package’'.\nMedley utilizes the following file types:\nlisp.virtualmem: This is located in your home directory and is an image of the last time Medley was run. If you start Medley without specifying an image to run, this image is used. XXXX.SYSOUT: This is an image that was explicitly saved by the developer. This may be loaded by specifying its name when starting Medley. XXXX (no file name extension): Source files created with the ``File Package’'. XXXX.LCOM: Compiled versions of the XXXX files XXXX.DFASL: Another compiled form of XXXX files XXXX.TEDIT: Text (like a word processor) in a Medley-specific format Project Directory Medley has something called its “connected directory”. This is just another way to say “working directory”. All file reads and writes occur (if no path is specified) in the connected directory. When Medley first starts up, its connected directory is your home directory. This can be changed by executing one of the following commands:\ncd MyProject or\n(CNDIR \"MyProject\") You will see the connected directory displayed at the top of the Medley window. Once the connected directory has been changed, all future image saves or file loads or saves will occur in this directory. Additionally, this directory will be saved in the image so when you re-load the image, you will already be in the desired directory.\nOne thing to note, however, is that the default image lisp.virtualmem will still be saved in your home directory. This assures that if you start Medley up without specifying an image, you will return to the last environment you were in.\nSaving And Running Images You can also manually save an image to a specific file at any point by typing the following from an Interlisp prompt:\n(SYSOUT \"my-file\") This will save your running image to a file named my-file.SYSOUT that can be loaded again by passing that file name to the run-medley command.\nCreating And Editing Functions Objects (function, variables, etc.) can be credited and edited as follows:\nED(myfunc) First, if it is a new object, the system will ask what type of object it is. After that, the user will be presented with a GUI structure editor where the object may be defined or edited.\nWhen the window is closed, via right-clicking on the title bar, the object will be saved.\nSaving \u0026 Loading Source Code To/From Disk Files When you edit or define a function, a variable, etc., Medley keeps track of the fact that they have been created or edited. These functions and variables are grouped and ultimately get associated with a file on your disk. In places, Interlisp refers to these disk files as “symbolic files”.\nFILELST - list of user files the system is aware of SYSFILES - list of system files loaded (FILES?) - prompts user for which file to associate newly defined functions, variables, etc. (MAKEFILE \"myfile\") - writes out all of the functions, variables, etc. that have been associated with file “myfile” (LOAD \"myfile\") - loads a previously saved file (LOAD \"myfile.LCOM\") - load a previously compiled file (CLEANUP) - interactively save and compile all changed files ","categories":"","description":"","excerpt":"Once the system has been started, you will see some windows with title …","ref":"/docs/medley/orientation/","tags":"","title":"Orientation to Medley"},{"body":"Medley repo releases contains the current Medley release. New releases are generated regularly as functionality is restored and extended.\nAn alternative is to point your browser to Online Interlisp and try our cloud hosted version of Medley Interlisp.\n","categories":"","description":"","excerpt":"Medley repo releases contains the current Medley release. New releases …","ref":"/running/build/releases/","tags":"","title":"Releases"},{"body":"A Brief Introduction Running Interlisp Online Go to Interlisp Online\nInterlisp Online Login You may either login as a Guest or create an account. If you plan to save and later retrieve files, register and create an account. Guest logins are not guaranteed to perserve sessions and stored files. However, if you just want to get a taste of Interlisp without the extra effort of creating an account, the guest login will suit your needs.\nSelect the Exec you want to run. For this exercise, select Interlisp Leave the Fill browser window option set. Select Run Medley. Your browser will open a window that represents the Interlisp Desktop and looks much like this:\nMedley Interlisp\nThe Interlisp Desktop at startup contains 4 windows of interest:\nPrompt Window: The black window at the top of the screen. It is used to display system or application prompts Exec (INTERLISP) window: The main window where you run functions and develop programs. Medley logo window: A window containing the Interlisp Medley logo as a bit map. Status Bar window Writing Interlisp programs In the Exec window, type the following:\n(PLUS 1 1) When you complete typing the ending ) the Interlisp interpreter will perform the calculation and return the result.\nOne thing you probably noticed, the command PLUS is capitalized. It’s not that the developers of Interlisp were always shouting at each other. Rather, when Interlisp was developed computer programming was in its infancy and standards for naming commands were still evolving.\nManaging memory images and sessions In Interlisp, there are two types of files relevant to managing memory images and updating them across sessions: lisp.virtualmem and .sysout.\nThe lisp.virtualmem file is a capture of the “current” state of the system (i.e., it is a copy of the virtual memory at a point in time). lisp.virtualmem is written whenever you execute (IL:LOGOUT) and also whenever executing (IL:SAVEVM). You can restart Medley using a lisp.virtualmem and it will pick up essentially where it left off before the LOGOUT or SAVEVM (with the exception that the user can set BEFORE/AFTER and LOGOUT/SAVEVM code that runs before you get control of the restarted lisp.virtualmem).\nA .sysout is a virtual memory image produced by MAKESYS (for writing an image for distribution) and SYSOUT (for saving a named checkpoint, e.g. to revert to a previous state if needed), which differ in the way they process the startup options. You can (and most frequently do) start Medley from a sysout file. When Medley starts from a sysout, it automatically runs initialization scripts — a site initialization script followed by a per-user initialization script (if available). A sysout is what you might call “a clean image”.\nAs for Interlisp Online: except as noted below, every time you Run Medley you are starting up from a sysout file (i.e., from a clean image). The exception is if you check the Resume previous session box. In that case, you will be starting up from the lisp.virtualmem stored for you online (if any) and that was created by the (IL:LOGOUT) at the end of your previous session.\nAs a registered Interlisp Online user you get the choice of resuming your previous image or starting from a clean image — with the default being starting from a clean image.\nFor guest logins, there is no Resume previous session because lisp.virtualmem is never preserved for guests.\nFor registered users, any files that you create (e.g., with IL:MAKEFILE) will also be preserved across sessions online. But these files will never be automatically loaded into the system when you re-start with a clean image — you need to LOAD them explicitly (or add a LOAD to your personal INIT file stored online at {DSK}/home/medley/il/INIT).\nSave your program as a file Opening a saved program What next? ","categories":"","description":"","excerpt":"A Brief Introduction Running Interlisp Online Go to Interlisp Online …","ref":"/running/online/usingonline/","tags":"","title":"Using Interlisp Online"},{"body":"November 15, 2021\nJoin Interlisp group or follow @interlisp on GitHub\nIntroduction To “revive” something is to make it live again. Making Medley Interlisp live again means putting the system in order so that others without a previous deep background in Interlisp can use and appreciate it (if only as a virtual antique).\nThe Medley Interlisp project started in earnest in March of 2020 (at the beginning of the pandemic). This report focuses on activities and accomplishments since the December 2020 virtual meeting of LispNYC (recording at: https://www.youtube.com/watch?v=x6-b_hazcyk).\nIn this document, work in the project is broken down into three main categories:\nWork on the software itself – debugging, adapting, etc. Documentation for the software Building an organization and developing a community Software Archeology “Software Archeology” is a process like putting together a functional bowl from pottery shards. We have not completed the task, but we have a stable base.\nThe software is old: it had been developed between the ’70s and the 90s, with many revisions, by many different people, working with little internal documentation. There were many “excursions” to support systems or options that are no longer available. Over the last 25 years, software standards evolved for C, Common Lisp, character codes, and operating systems.\nMaiko Maiko is the implementation, in C, of the Medley Interlisp virtual machine. It can be found at https://github.com/interlisp/maiko.\nConformance: We have been making Maiko conform to modern C compiler expectations. Removing support for outdated systems simplified the task. SDL: Support is underway for SDL, a multi-platform (Windows, Mac OS X, Linux, iOS, and Android) graphics toolkit as an X11 replacement. SDL can be used instead of X11 as the shim to the native window system, which (we hope) will allow the system to run on Windows without separately installing X11, Docker Desktop, or WSL2. Because of the cleanup work, the code is much more portable than ever before. Systems we’ve tested on or regularly build for include\nOperating systems: macOS, Linux, FreeBSD, Solaris 11.4 CPU architectures: i386, x86_64, arm7, aarch64, SPARC-32 and -64 This covers Raspberry Pi (linux.arm7) and Windows 10 (with WSL2 or Docker). and Windows 11 (includes WSL2). Performance is outstanding. A $40 Raspberry Pi completes Lisp tasks 250-1000 times faster than the Dorado (the $90k high-end Xerox 1132 Lisp machine).\nMedley The rest of the system is implemented in Lisp: Interlisp and Common Lisp interpreters, compilers, debugging tools, editors, window system, graphics, device drivers. In the last year:\nOrganization: We have been cleaning out and organizing, comparing dates on files, and deciding which to keep; building maintenance scripts and Lisp utilities. EOL and character conversion: the code for handling end-of-line and character codes was generalized, on the way to full Unicode support. (See Medley Issue #2) Git integration: Interlisp’s file manager was designed for versioned files with version numbers. GitHub has a different graph model of history. We built “restore-versions” to restore numbered versions from git logs, but the problems are deeper. If the Interlisp style of programming is going to be supported, we have to solve these problems. (see Medley issues #265, #226) Loadups: We recreated the method of building a system from scratch, which used to be an hours-long manual process. Debugging: We found and fixed a variety of bugs: a few Y2K problems, some instances of “bit rot” and smashed files, incomplete implementations, and code patched at “wrong level”. Modernization: Window manipulation by title bar dragging and corner selection, mouse wheel scrolling, clipboard–these seem to be necessary enhancements for modern users. Release process \u0026 automation: GitHub Actions are now used to automate the build process for Medley releases and also a Docker container, deployed to Docker Hub as Interlisp/Medley. This gives a way to run Medley in the cloud (on Amazon Web Services, Azure, Google Cloud) or on the Windows Desktop with remote access in a browser. Interlisp Applications One of the reasons for restoring Medley Interlisp is to support the revival of applications written for it.\nNotecards: Notecards is a hypertext system developed well before the web or Apple’s Hypercard. http://notecards.online was built with the Medley/Docker release, running Medley “in the cloud,” with web browser access. We are adopting this to work for other Medley Interlisp systems, and for others to build. Rooms: Rooms is a Lisp desktop manager for less cluttered window access with interesting innovations. In the Medley repository. Loads but untested. CLOS: The Common Lisp Object System adds a style of Common Lisp class structures added after Medley’s Common Lisp implementation to the ANSI standard. Also loads but untested. LOOPS: An object-oriented Lisp addition (to Interlisp) prior to CLOS. Of interest because of AI applications built using it, including “Truckin’” – a demonstration of “knowledge programming [see paper]. The source code for the Truckin’ application exists and will be used to test LOOPS once it fully loads and is compilable. LFG: the Grammar Writer’s Workbench, LispUsers: User-contributed software (before “open source” was a thing). We’ve checked out over half of the LispUsers files. Documentation Books Interlisp: The Language and Its Usage, by Steve Kaisler, originally published by John Wiley \u0026 Sons, scanned and converted to a compact PDF. This book describes the core features of the Interlisp language. Medley Interlisp: The Interactive Programming Environment, by Steve Kaisler, describes the Interlisp-D Interactive Programming Environment as implemented on Xerox D-machines and now running on several modern platforms. Medley Interlisp: Tools and Utilities, by Steve Kaisler (undergoing editing) describes the editors and tools to be used for program development. It is expected to be completed and uploaded to Interlisp.org in early December 2021. Software Documentation We’ve converted TEdit source documents to PDF (see medley-pdfs). We have the IRM (Interlisp Reference Manual) with links to online help (DInfo), User Guides, Release Notes, Primer. We still need to convert and publish documentation for some Interlisp applications and to organize and update to make it easier for newcomers.\nBibliography Zotero is an Internet bibliographic service. We have set up an Interlisp Zotero of Lisp-related material, many items with the source material as PDFs. Our goal is to have a comprehensive source of information about Interlisp-related technical papers, technical reports, and manuals for various versions and implementations of Interlisp (and, for comparison) contemporaneous “Lisp Machine” competitors.\nWorking older versions In addition to modern Medley, we have begun to organize other emulations of older versions, and a “history” repository, including files from Interlisp-10, the “DarkStar” emulator of the Xerox 1108 / 8010 hardware, and sysouts for many different releases of Interlisp-D. We’re working on making an earlier version of Medley (running on an emulated DosBox); currently available with instructions in the Interlisp/DOS repository.\nOutreach To attract users and supporters, we need to make the project known.\nWe developed and installed a GitHub “code of conduct”, “contributor’s guide” and issue templates (although we haven’t been using the templates and need to review them). Maintained additional web resources https://interlisp.org web site, and its Bibliography from Zotero. README’s and other repository documents Interlisp/medley Wiki (github.com) We track mentions of “interlisp” in social media (and posted a link to this document) Twitter (@interlisp8) LinkedIn Reddit Facebook: Xerox Workstation Alums, LISPERs groups. IRC #Interlisp on Libera.chat Meetup \u0026 Lisp groups: LispNYC, Bay Area Lisp: online-lisp-meets@common-lisp.net Conferences to announce to? European Lisp Symposium (european-lisp-symposium.org) Computer History Museum (CHM) – we’re hoping to provide access to Interlisp via an analogous setup for the CHM’s Smalltalk Zoo. Software Preservation Network (SPN) through their Emulation-as-a-Service Infrastructure is a possible way of getting Medley access available to researchers. Who are we? In this document, we use “we” to mean our contributors:\nas members of the lispcore@googlegroups.com mailing list/group (Medley Interlisp core - Google Groups) as participants in a weekly zoom call Meetings recorded but not public Agendas: Meeting Agendas and Notes as members of the GitHub Interlisp organization as contributors to an Open Source project 384 issues, 133 closed, 151 open Issues. 54 discussions 191 Medley pull requests, 387 Maiko pull requests as a (non-profit) corporation: InterlispOrg Inc. We depend on volunteers to help. If you’d like to help but aren’t sure how to, ask.\nFuture activities There were some tasks/projects listed here; they have been moved to GitHub issues.\nAcknowledgments We’ve gotten a lot done, but there’s quite a bit more to do. Thank you to Abe, Alexander, Arun, Bill, Blake, Frank, Herb, John C, Larry, Michele, Nick, Paul, Peter, Ron, Wayne, Zoe.\nA moment in memoriam to past contributors, including John Sybalsky, Warren Teitelman, Danny Bobrow.\n","categories":"","description":"","excerpt":"November 15, 2021\nJoin Interlisp group or follow @interlisp on GitHub …","ref":"/news/2021medleyannualreport/","tags":"","title":"2021 Medley Interlisp Annual Report"},{"body":"Warren Teitelman Obituary\nDanny Bobrow Obituary\nJohn Sybalsky Steve Purcell ","categories":"","description":"","excerpt":"Warren Teitelman Obituary\nDanny Bobrow Obituary\nJohn Sybalsky Steve …","ref":"/credits/in-memoriam/","tags":"","title":"In Memoriam"},{"body":"Interlisp Online provides access to a version of Medley running in the cloud. You can login as a guest, but if you want to save state from one session to the next, you should create an acccount. All that is needed is an email address and password. Once an account has been created you can log in and start a Medley Interlisp session.\nSessions are preserved for users that login but\nare not saved for “guests” may be deleted after 30 days of inactivity Running online should be good for experimenting and introducing yourself to the environment. Anything you create in the online environment should be treated as transient. If you’re interested in developing and experimenting with Lisp programs then you will want to investigate other options. But, for a first foray, this is a good starting place. The Interlisp/online repository may have more details.\nThings to note when running online Browser compatibility Watch out for control-character conflicts (control-W always gets me) Security not guaranteed Need a solid net connection to our AWS server (currently in Ohio) Back to time-sharing: Maximum load ~24 simultaneous sessions ","categories":"","description":"","excerpt":"Interlisp Online provides access to a version of Medley running in the …","ref":"/running/online/","tags":"","title":"Interlisp Online"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/medley/","tags":"","title":"Medley"},{"body":"This document attempts to capture what people have said about their interests in the project. We may all have different ends in mind, but we share many common goals. We were working on sharing before “open source” was a thing. See also the corresponding “guest-book.md” guest book and the “twitter.md” quotes.\nBlake McBride Imagine finding an old car from the 1960s. It’s been sitting in storage for decades, doesn’t run, and looks like hell. You remember driving the car when you were young and how much fun you had with it. It had a number of features you enjoyed back then that don’t exist anymore. You want to re-live the experience and be able to share it with future generations so that they can experience the same thing and learn from the lessons it taught.\nYou decide to fix the car up. Make it run well again. Make it look good again. It’ll be close to what it once was - a thing of beauty of that time.\nThe thing you don’t want to do to it is make it modern. You don’t want to add air conditioning to it, and you don’t want to add anti-lock brakes to it. You don’t want to do that for several reasons as follows:\na. You lose the whole value of bringing the old experience into the present.\nb. You are trying to make the old car modern. Ultimately, you can’t compete with modern cars and all of your “enhancements” are just tack-on garbage.\nI like InterLisp for what it was. It was a thing of beauty in its own right. I’m not looking to create another “modern” development environment out of it. Additionally, there are several top-notch Common Lisp systems available. Making yet another Common Lisp implementation is as utterly a waste of time as I can imagine. To this end, I think emphasizing and enhancing Common Lisp is doing more harm than good. Same for things like new fonts.\nWhat we should be doing is:\n1. Make sure it runs really well and is as portable as possible.\n2. Emphasize InterLisp rather than Common Lisp.\n3. Fix bugs and make it run as close to some spec that we chose.\n4. Do not make enhancements that lie outside the spec.\n5. Focus on making it look and run as it originally did.\nJohn Cowan When I went to summer camp in the 1970s, the director owned a 1932 Packard that we sometimes got to take rides in. But we could only do that on the camp property because the car was completely unsafe under any other conditions (for one thing, the starter didn’t work: you had to push the car). By now, riding in it at all would probably be either illegal or contrary to the camp’s insurance policies.\nThis isn’t directly on point for Interlisp, but it illustrates why you might need anti-lock brakes even if not air conditioning.\nThe Society for Creative Anachronism provides a medieval experience for its members and guests, but without the original filth and consequent disease. The simulation of Interlisp-D isn’t going to be perfect.\nI’m not saying that it makes sense for the Medley development environment to support, say, Java programming. But Common Lisp is another matter.\nCommon Lisp is *part* of Medley (and its predecessors Lyric and Koto). The Interlisp specs have always been a posteriori: they tell you what the existing implementations have in common. That’s a good and valuable thing, but Medley is now the leading implementation (in the sense that OpenJVM is the leading Java implementation), and the spec is what Medley does (modulo OS interface bugs, of course. The Common Lisp standard is another matter. It is a priori: if you are writing or maintaining a Common Lisp implementation (at least one new implementation is currently underway) and it doesn’t agree with the current (1994) spec, it is buggy and you should fix it. If it were a question of adding Common Lisp support to Medley, I’d say “Forget about it!” But it isn’t. It’s just bad luck that most of the work was done between the 1984 and the 1994 standards. (No further standards are contemplated, so when it’s done, it’s done.)\nAt the very least, someone should run the ANSI test suite and see at which points it fails to be conformant. It’s known that some Common Lisp bugs and limitations were fixed since the Medley release, but nobody remembers which ones.\nNote that I am not an Interlisp insider and have no axe to grind, except that Larry has said the purpose of this effort is to create a new group of Medley users/maintainers), and I think what will matter to them most is the programming tools. If they can develop on Medley and either deploy on Medley or on SBCL, that will be a big incentive.\nMichele Denber Well, I guess I might as well toss in my $0.02. I am not an Interlisp insider, just a user. I came to Lisp at Xerox back in the early 80’s. Coming from a Fortran/PL/I/APL/BCPL background, Interlisp-D was a revelation to me. The power of this environment was so amazing I couldn’t imagine ever going back to anything else.\nIMNSHO, Interlisp-D needs just three things to be as good a development environment as anything around today: network connectivity, local device access (USB, printers, etc.), and color (just because everything is in color these days). All of these features were available back in the 80’s on the D-machines but were lost with the move to X.\nThe closest thing I’ve found to Interlisp-D in terms of quickly coding up some algorithm and getting it running is Matlab. But Interlisp-D as an IDE is far superior to Matlab.\nRon Kaplan I was the one who was most interested in the resurrection, because of my desire to use it as a platform to explore new aspects of linguistic theory (LFG). Many years ago we (namely, John Maxwell in my group at Parc) translated the core algorithms from Interlisp to C, and that provided a high-speed commercial-grade implementation that became the basis for the Powerset spin-out company. But we took a 40-to-1 hit in coding productivity (with maybe a 1-to-40 efficiency gain), and it is virtually impossible for someone other than John to use the C implementation for experimental investigations.\nIt was a real break when Nick had the time, about 3 years ago, to figure out what was causing it to crash on the Mac. I have probably been the only “user” for the last 3 years before this community effort got started. During that time I encountered a few bugs in the emulator that Nick was able to track down (I remember a fat/thin string bug, a bigending bug) and at least one that is still lurking (stack corruption with multiple-value returns). But it has been remarkably stable—I have run for weeks if not months in the same sysout without crashing.\nAlong the way, I fixed a few other compatibility bugs to make it work better in the Mac environment, and I also did some modernization extensions (interface to the clipboard, moving and reshaping windows by dragging the title bar and corners instead of the silly pop-up menus).\nAnother important modernization that I have worked on and has been discussed is to replace the XCCS character encodings and fonts with Unicode, so that text files at least can move back and forth between Medley and the OS. Especially because the XCCS fonts that we have are so incomplete. And a few other things that make it easy to interoperate with modern interface conventions as they evolved away from our intuitions in the 80s and 90s.\nBut none of this would change the core behavior of Interlisp, it would just reduce some of the barriers to entry and make it less confusing to move in and out.\nI am not particularly interested in Common Lisp per se, except insofar as Common Lisp has added a collection of often useful and sometimes elegant new functions that I call from time to time. In terms of capabilities, Common Lisp and Interlisp tend to generalize on different dimensions and so a mix can sometimes be helpful.\nHowever: the integration of Common Lisp into the Medley development environment is incomplete, and in some ways broken. Key attractive features of the environment simply don’t work on Common Lisp FUNCTIONS and MACROS that are contained in files. I would never actually do a DEFUN or DEFMACRO in my own code, although I certainly do call out to Common Lisp functions. Common Lisp feels basically like a reversion towards a non-residential system. (There are also some inconveniences in the way that BREAK works.)\nMy primary goal then would be to complete the Common Lisp/Medley integration so that the development experience is consistent for FNS and FUNCTIONS etc. Upgrading Common Lisp to this or that standard might also be an attractor (or less of a disincentive) for others to come into this particular implementation, but I would first want to ensure a consistent Medley development environment.\nLarry Masinter For me, the importance of Medley is as a development environment. People who used it (including myself) were much more productive. It spoiled me so much I’ve never been proficient in anything else.\nI didn’t think people could get the sense of the development without a lengthy session, to use it “in anger” – trying to get something else to work while using medley as a tool.\nI think showcasing “things people built in Interlisp” shows the power of the development style, especially for research prototypes.\nI think with a volunteer effort like this, it is to be expected that people have different things they want to get out of it, and the project goals are necessarily a synthesis of the individual goals. We have common subgoals. I don’t think there are any serious conflicts except perhaps priorities.\nGetting the system stable is very important.\nGetting the envos tests to run is a subgoal\nThere is too much to do with available manpower, so getting people to join is necessary. The first hurdle of contributing is understanding how to get started\nPaul McJones I’ve had the feeling that I don’t understand “the big picture”, and how the discussions fit in. For example, support for the Unicode character set and for modern scalable fonts would make it nicer to do work like Ron’s computational linguistics in Interlisp, but don’t seem too necessary to support people using Interlisp to understand its programming environment. Similarly, getting Interlisp to interoperate with git repositories seems like a distraction for someone who is trying to understand how Interlisp’s programming environment worked back in the 1970s and 1980s.\nHere is my attempt to think about a “stripped down” path to preserving Interlisp history in a fashion allowing it to be used and studied:\n1. Create one or more snapshot releases of Interlisp (a suitable virtual machine, a file system with sysouts, sources, and compiled files, and a matching set of documents (reference manual plus getting started guide) that will run on one or more modern platforms and that are complete enough to use the standard Interlisp tools to edit, compile, debug, and run an application. The snapshots would be distributed as compressed tar files and could be downloaded and run without any use of git or GitHub. If one of these could be adapted to run in a web browser, it might become the dominant way for “outsiders” to sample Interlisp.\n2. Create a series of source snapshots corresponding to various interesting points in the Interlisp timeline for which complete or partial sources are available, for example:\nParc/BBN PDP-10\nParc D machines\nEnvos (D machines?)\nVenue (Solaris)\nEach snapshot would be a compressed tar file, and, where available, would include multiple versions of various source files, as maintained in the traditional Interlisp development environment. These snapshots would be archived (for example at CHM, and possibly software heritage.org). They would also be the starting point for creating the executable snapshot releases of #1.\n3. The one component of Interlisp that seems compatible with git file-based development is the maiko virtual machine, although pragmatically I think the main activity would just be fixing show-stopper bugs and adapting it to new platforms.\nBut for the Lisp source files, it seems that informal mechanisms used in the 1980s to coordinate within a small group of developers are still the best way.\nNick Briggs I’m mostly interested in getting the underlying emulator code working reliably. Unfortunately, there is little-to-no documentation available for the (C language) code itself, or description of the technical design and implementation details behind it. This makes it critically important to me to have the code history preserved, in its entirety, so that when I find something that appears to be a problem I can look at all the revisions that have been made to determine if there was an error introduced recently, or exposed by, for example, operating system or compiler changes, or is an endian dependency that was never resolved (for which we need to have both the original big-endian and newer little-endian versions). Since there is very tight integration with the lowest levels of the Lisp sources, I’m also interested in ensuring that we keep the history of the Lisp code available too – preferably in a way that permits easy comparisons of previous versions, and such that we can track the source in a running sysout back to the Lisp source files that we are keeping.\nArun Welch I started working part-time for XAIS when I complained to John that the TCP/IP code was broken and he responded with “yeah, but all the AR’s reporting problems are coming from you and all the patches to fix those AR’s come from you so why don’t I pay you to support it since I don’t have any resources available to do that anyway”…\nFrom there I supported the networking code, maintained the PCL port, and assorted other applications layered on top of the basic system as the ownership transitioned from XAIS to Venue to Envos.\nI’m interested in getting some of the applications that were built on Interlisp/Medley working in the current environment, including:\nROOMS NoteCards PCL/CLOS Abe Jellinek Larry Masinter writes: Abe is a senior CS / History / Arabic triple-major at UC Berkeley, with whom I worked before, on an Open Data and PDF project. He’s been helping with getting Medley running in a Docker container as a possible “safe” deployment for Windows without WSL2 and Interlisp as a Service in the cloud.\nBob Bane I would like to resurrect and extend the Common Lisp development part of Medley Making Common Lisp a fully supported part of Medley was an amazing achievement back in the day; I did a bunch of work in that environment and really liked the combination of Common Lisp and managed source files.\nWilliam Maddox I saw the recording of your demo at the NYC Lisp group…. I figured I’d download it and give it a whirl over the weekend. I’m interested in seeing what a residential Smalltalk-80-like Lisp system feels like. I’ve used Allegro CL and various file-oriented Lisp and Scheme implementations over the years, but Interlisp-D was a bit different. I also have a “thing” for self-contained systems that can run on bare metal. I think Wirth’s FPGA Oberon is really, really cool, but it’s really a bit of an educational toy, and the language is a dead-end. A real Lisp system would be so much neater. My interest, if I got involved with any development, would be getting a bare-metal port of maiko running. Recently, a fellow combined a bare-metal support library with an ST80 virtual machine in C (both pre-existing open-source) and got an ST80 image running on bare-metal Raspberry Pi – no Linux in sight. In reality, though, a stripped-down embedded Linux would do the same thing, more or less. I really think to experience a Lisp machine, however, it needs to boot directly into Lisp. Running any sort of emulator “in a box” on a modern desktop, with a web browser, Facebook, and all those other distractions is just cheating. ;)\nStephen Kaisler Back in the 1980s, I had written a book on Interlisp: The Language and Its Usage, which was published by John Wiley \u0026 Sons. The book has been out of print for years.\nOne of Xerox Electrical Optical Systems salespersons had told me they had purchased some copies to give to customers of their early D machines.\nI had used Interlisp in several variations: Interlisp/360 (an implementation from Israel), Interlisp-D on a Xerox 1100 that I had at CIA, Interlisp-D on a Xerox 1186 that I had as a DARPA Program Manager, and Interlisp-VAX.\nI began a subsequent volume entitled Interlisp-D: The Interactive Programming Environment, which had the same structure, format, and approach as the first book. It was submitted to John Wiley \u0026 Sons, who had initially agreed to publish, but then demurred after Xerox apparently stopped selling D-machines and Common Lisp came to the fore. The volume currently has 13 chapters and about 500 pages with numerous examples that I had tested on both my Xerox 1186 and on Interlisp VAX (the ISI version). It was written using Microsoft Word.\nSo, it languished for many years as I had hoped to see Interlisp-D be revived. Now, it appears that is the case with the Medley Interlisp project.\nI am interested in participating in the project, re-editing the book with its examples, adding to it as appropriate, and adding it as another source of documentation to the Interlisp-D revival.\nI wonder if you are also going to include LOOPS as part of this revision. I took the LOOPS course at PARC in 1983 with Peter Fisher of XEOS as my partner.\nI am looking at the possibility of converting the first volume from PDF to Word so it can be further edited. Not sure if this is possible depending on how the PDF was created. If I can do this, I may split that volume into IA and IB to make it more manageable.\nAs I got more into editing the second volume, I realized it was going to be very big. So, I have split it into Volumes II and III:\nVolume II: The Interactive Programming environment Volume III: Tools and utilities like TEdit, DEdi, etc. Once I start working on LOOPS, it may become a fourth volume. Others may arise as we get further into the project, but that is a ways off.\nGuenther Goerz I got familiar with Interlisp when I was working on an implementation of a parser for my PhD thesis work in the late 1970 and 1980s. It started with a little cooperation with Martin Kay (and also Ron Kaplan) from PARC at a computational linguistics summer school in Pisa. Although I had a tenured researcher position at my university, I did not have any means to acquire one of Xerox’ LISP workstations, which were sold in Germany by Siemens for something like 90000 Euros (today’s equivalent) - so I used Interlisp on a Siemens mainframe to which I had access. The Interlisp version was a descendant from the IBM implementation - both machines had basically the same hardware architecture but different operating systems (which was not a problem for the rather self-contained Interlisp environment). After spending some time with IBM’s LILIOG project at IBM in Stuttgart and getting my first professorship at the University of Hamburg, I came back to Erlangen in 1991. So, in the 1990s I used the Fuji Xerox emulation of Medley on Sun workstations and later on Linux machines. Additionally, we also acquired a license for the DOS version of Medley 2.0 from envos/Venue. What I used for some time was the LFG implementation in Medley - which I got from Ron Kaplan in Linux - in Suse Linux, running on my Mac(s) with the Parallels Virtual machine, mainly for teaching purposes. But I was also interested in various features of the programming environment… Recently, just for fun, I tried to get Medley up and running under DOSbox on Mac OS X. I was also wondering whether there is a DOS emulator for the ipad - and there is one, iDOS, which works pretty well! So, despite the small screen, Medley 2.0 runs amazingly well on the ipad too.\nI must add that we (our chair at FAU Computer Science) first acquired a Medley 2.0 license for the Sun workstations through Xerox France first and the DOS license later. We used it for our first steps in the Behaim Globe project (also trying out NoteCards and implementing our first ontology with CLOS) and the actual portal http://wisski.cs.fau.de/behaim has still some of the code deep inside and furthermore for NLP, in particular, the LFG grammar development environment. Since I was a simple user, my expertise is pretty small; I was never involved in anything close to system development. Later on, I switched to Scheme for teaching and research for reasons of clarity and simplicity and also for theoretical reasons - I never liked Common LISP very much. But of course, there was never such a comfortable programming environment for Scheme.\nAfter my retirement in 2012, I focussed on the development of our VRE Wisski in cooperation with two museums (http://wiss-ki.eu), which turned out to be quite successful - in the meantime, there are several hundred applications. Furthermore, I helped to get Digital Humanities at our university up and running - they are starting a new department quite now - and I was involved in some DH projects at the Max Planck Institute for the History of Science in Berlin and more recently at the Bibliotheca Hertziana (Max Planck Institute for Art History) in Rome in the field of “cosmography” (which was the correct term in the Renaissance), i.e. modelling and annotating historical texts and maps (https://wisski.biblhertz.it).\nA while ago I tried - just for curiosity - whether the old DOS version of Medley 2.0 would also run in the DOSBox under Mac OS X. It worked really well, and so I became even more curious whether there would be something like DOSbox for iOS - and yes, there is iDOS, basically designed to run old computer games. Now Medley 2 runs on my ipad… Actually, I don’t have any further plans, and I didn’t realize what happened after Medley 2.0. So, from your presentation at lispNYC I learned that there seems to be something like a new version 3.0. Sounds tempting… So, I would be glad if we could keep our contact active.\nJ Moore I checked out interlisp.org. That’s an interesting project. I am glad you’re doing it. Too often the first implementations of good ideas are overshadowed by evolutionary improvements. (In that spirit, a few years ago I reimplemented the first Boyer-Moore theorem prover – the one we built in Edinburgh in POP-2. But I implemented it in ACL2, i.e., applicative Common Lisp. But it proves the same theorems the same way as we did in 1972-3.)\nAs for the VM, I don’t have much context to add beyond what I wrote in the Acknowledgements of CSL-76-5, which I’m sure you’ve read if you’re interested in that question. I got my PhD from Edinburgh in November, 1973, and arrived at PARC in January, 1974. Danny Bobrow had taken a sabbatical from PARC (BBN?) in ‘73 and spent it in Edinburgh, where he convinced me to join PARC. The Acknowledgements says Warren Teitelman asked me to write the VM document in January, 1975. But I actually suspect it was earlier than that, perhaps as early as January, 1974 (i.e., I got the year wrong!). The reason is that the Acknowledgement says we spent 2 years writing it, but CSL-76-5 came out in September, 1976, so I suspect Warren approached me in the a few months after I joined PARC. For the record, I don’t remember doing anything at PARC besides (a) re-coding the Edinburgh theorem prover in Interlisp as a warm up exercise and to continue my research on theorem proving, (b) helping Simonyi with the representation of text in Bravo by implementing the underlying data structures in Interlisp and responding to Charles’ requests for new features, (c) writing the VM, (d) inventing the fast string searching algorithm with Boyer and fighting the lawyers at Xerox to publish it (ultimately by threatening to remove my name from the publication and let Boyer author it), and (e) fighting with Ben Wegbreit and Jerry Elkind over the ``right’’ way to approach verification and ultimately leaving. So I suspect that my VM work was my first and main official task at PARC.\nOther than that, I think the Acknowledgements say it all, accurately. The line there that says I think my friends in the formal verification community will be displeased was not speculation. Tony Hoare wrote me a letter upon seeing the document in which he complimented me on the precision and urged me to get back to formal methods. Oh well.\n","categories":"","description":"","excerpt":"This document attempts to capture what people have said about their …","ref":"/about/medleygoals/","tags":"","title":"Medley Goals"},{"body":"The 2022 Medley Interlisp Annual Report provides a detailed report on 2022 accomplishments.\nRecent Updates 12/2022 2022 Annual Report 9/2022 Newcomers welcome! 6/2022 Documentation update. We’re updating the project documentation. Feel free to make suggestions for improvement Significant development of integration with GitHub (via the GITFNS module) for doing a Lisp-based PR review workflow 3/2022 Interlisp Online new version! Many new/improved features. From any (recent) browser. Medley is running “in the cloud” and you connect to it (and your account) over the web Medley Documentation. We’ve been updating the online documentation at least for getting started – instructions on Running in various contexts and Building and Using Interlisp.Org has been approved as tax-exempt by California Franchise Tax Board and the California AG, State Charity Registration Number: CT0278267 We have joined (as an “implementation sponsor”) the Software Preservation Network. See Interlisp and SPN for more information Many updates to Medley features and files; most releases have a ‘What’s Changed’ section or URL 1/2022 Merry Christmas and Happy New Year\nSteve’s Medley Interlisp: The Interactive Environment reformated for easier online reading. Joining the Software Preservation Network. Interlisp.online progress, changes expected New User documentation Still awaiting California Franchise Tax Board (FTB) to confirm exempt status (ETA April) work on Lisp-based GitHub client, comparison of Lisp files 12/2021 Interlisp Online: Run Medley Interlisp in the cloud with just a browser. No download or install. Lower the barrier to entry. Of course, it’s better to install a release on your own machine, but for the casual visitor, this is better. Still under development but try it out, report problems (use issue tag ‘online’). There seem to be problems with Safari on older macs–try Firefox or Chrome. a mouse and keyboard are still necessary on tablets. For the immersive “Lisp Machine” experience, run “fullscreen”. HiRes display? Most browsers will let you scale the pixels. InterlispOrg Inc has been approved as a 501c3 with the IRS. The simplest way to donate is using the GitHub Sponsor button. recent reviews on twitter were complimentary of our efforts 11/2021 Medley Interlisp: Tools and Utilities (Interlisp book 3) now available for preview; comments and corrections welcome. 2021 Annual Report, November 15, 2021. ","categories":"","description":"","excerpt":"The 2022 Medley Interlisp Annual Report provides a detailed report on …","ref":"/news/","tags":"","title":"News"},{"body":"GitHub The Interlisp organization on GitHub contains repositories for\nMedley: Lisp code, build scripts and GitHub automation maiko: The C-coded virtual machine documentation (including this web site) plus other related project components. Bugs, feature requests, and questions are best posted as GitHub issues in the Medley repository. Do check to see if your issue or question is answered there.\nParticipants in the project can join the GitHub Interlisp organization.\nMeetings We have a weekly meeting on Mondays on Zoom. Meetings are to report accomplishments, status, plans, and problems, and discuss directions. Meetings are recorded, but recordings are not public, If you’d like to join in, let us know.\nMonday, 1:30 pm ET / 10:30 am PT\nMeeting Agendas and Notes Recent meeting agendas and notes are here. Older agendas are here and here. Meeting recordings are made using Zoom “record to the cloud” and then download to google drive; but saving to a youtube private channel is a possibility. EMail and access groups There are two Google groups in use:\nInterlisp, archives here, and LispCore, archives here. The archives are public. The LispCore group has access to meeting recordings, and usually gets more email (at least lately). Posts from non-members are moderated.\nOther ways to discuss Interlisp or find out more Interlisp.org is a Google workspace; “interlisp.org” email addresses and aliases are available.\nInterlispOrg Inc is a non-profit 501c3 corporation. We accept donations! Show your support!\nLibera.Chat has a #Interlisp IRC Channel. A place for informal chat. Connect by pointing your IRC client to irc.libera.chat:6697 (TLS) and /join #interlisp. Say hello. There are also channels for #lisp (any dialect) and #common-lisp.\nTwitter handle: interlisp8.\nDirect email: In addition to the email groups you can contact by emailing us at info@interlisp.org.\n","categories":"","description":"","excerpt":"GitHub The Interlisp organization on GitHub contains repositories for …","ref":"/about/getinvolved/","tags":"","title":"Get Involved"},{"body":"Software Preservation Network We joined SPN in 2021.\nMembership of (mainly academic and non-profit) organizations We might partner with one or more of their members Membership is $4k/year Hosts Emulation as a Service infrastructure Universities: CSUCI California State University Channel Islands\nProfessor Eric Kaltman LFG (Lexical Functional Grammar) group Set up to allow tax-deductable donations for student travel to conferences LFG is a current Medley application maintained by Ron Kaplan Computer History Museum PARC is purportedly giving a grant to CHM of software collection, including lisp sources hosts Smalltalk Zoo offered to record history interview SPN member Internet Archive MAME Software Heritage UNESCO sponsored activity to collect and archive software Longer term focus claims are on reproducibility of software artifacts ","categories":"","description":"","excerpt":"Software Preservation Network We joined SPN in 2021.\nMembership of …","ref":"/about/partners/","tags":"","title":"Organizational Partners"},{"body":"Interlisp-D was built in an environment where people didn’t keep files on their local disks. Files were kept on a File Server. Interlisp-D was built on Tenex, a PDP-10 operating system built for Lisp.\nMaiko implements a case INsensitive, versioned file system on top of normal Unix/Posix file system using the code in DSK.c.\nYou may see references to file systems at PARC, at XAIS, at Envos and at Venue. There was a NFS implementation, XNS Filing system, and LEAF.\n","categories":"","description":"","excerpt":"Interlisp-D was built in an environment where people didn’t keep files …","ref":"/docs/medley/the-medley-interlisp-dsk-file-system/","tags":"","title":"The {DSK} file system"},{"body":"Educopia is a non-profit organization hosting the Software Preservation Network and other software preservation groups.\nThe also offer additional resources on organizational principles.\nCommunity Cultivation Framework: a framework for thinking through a community’s development. Vision in Formation: “Articulating Your Community’s Purpose”: A community facilitator’s guide around starting those mission, vision, and values statements, with templates, including sample agendas, forms, and boilerplate email text. “It Takes a Village”: Tools for planning sustainability for open source software initiatives serving cultural and scientific heritage organizations. The Community Tool Box: templates and advice around community assessment, developing strategic plans and organizational structure, and building community. ","categories":"","description":"","excerpt":"Educopia is a non-profit organization hosting the Software …","ref":"/about/partners/educopia/","tags":"","title":"Educopia"},{"body":"Medley can run on any Linux system that includes X Windows, including Windows System For Linux on Windows 11 and Windows 10 Build 19044+.\nIt is also recommended that the Linux system have a web browser installed. For WSL installations, the browser(s) on the Windows side will suffice. A browser is not strictly necessary to run Medley, but several features of the system (e.g., displaying some user documentation) will not work without an external browser installed.\nMedley can be installed on your system in one of two configurations: standard and local. Standard installation will install Medley into system directories and install any prerequisite packages. Local installation will install Medley into any user directory but any prerequisite packages must be installed manually.\nOn WSL, Medley will run on either WSL1 or WSL2. WSL2 is preferred, but for older machines that do not support virtualization (see here) or Windows builds prior to Windows 10 Build 19041, WSL1 will work just fine although it will be limited to the VNC mode (see below). See here for more information on running Medley on WSL.\nStandard Installation (Debian-based systems only) Standard installations are currently supported only for Debian-based systems (i.e., systems that support dpkg), including Debian-based distros on WSL.\nIn a standard installation, Medley is installed in system directories (specifically, /usr/local/interlisp) and support like man pages and (a link to) the medley executable are also installed in standard system locations (e.g., /usr/local/man and /usr/local/bin).\nStandard installations are ideal for users who want to explore Medley (including its system code) or to develop applications built on top of Medley. Standard installations are not good for users who want to modify the Medley system code, since that code is installed in protected locations.\nStandard installation uses apt to install a .deb package downloaded from the Medley downloads site. The .deb package will install Medley as well as any other packages needed for Medley to run.\nThere are separate .deb packages for “standard” Linux and for WSL (as well as for the three machine architectures - X86_64, ARM64, ARMv7). The WSL packages differ only in that they include an additional functionality to have Medley display in a VNC Window instead of a standard X Window. This is useful on high resolution displays since the VNC window will scale according to the Windows Settings-\u003eDisplay-\u003eScale setting, while the X Window on WSL will not so scale. The WSL packages also install the wslu package, which is used by Medley to connect to external browsers as described above. Aside from these two features, a non-WSL .deb package will install and run on WSL.\nTo install a standard package and run Medley: Download\nUsing a browser download from the Medley downloads site the .deb package for your platform (i.e., “standard” Linux or WSL) and your machine architecture (X86_64, ARM64, or ARMv7) to \u003cdeb_filepath\u003e.\nNote that on WSL, \u003cdeb_filepath\u003e will depend on whether the browser was started in Windows or in WSL. If downloading to the standard Downloads folder, using a WSL-based browser \u003cdeb_filepath\u003e will be in ~/Downloads. If using a Windows-based browser, \u003cdeb_filepath\u003e will be in /mnt/c/Users/\u003cusername\u003e/Downloads.\nInstall\nIn a terminal:\nubuntu@oio:~$ sudo apt update ubuntu@oio:~$ sudo apt install -y \u003cdeb_filepath\u003e Run\nIn a terminal:\nubuntu@oio:~$ medley There are many options to the medley command. For a brief overview, run medley --help. For a more complete description, run man medley or medley --man or click here.\nFor first-time users: medley --apps or for WSL medley --apps --vnc is a good starting point. This will give you a fully populated Medley system, including the applications built on Medley such as Notecards and Rooms.\nNotes: By default, medley will create a directory in $HOME/il. This will be used by the Medley system as its LOGINDIR. Medley will start up with LOGINDIR as its current connected directory. It will load the personal init file (if any) from LOGINDIR/INIT or LOGINDIR/INIT.LCOM. Finally, Medley will use LOGINDIR/vmem/ to store its virtual memory file(s). The location of LOGINDIR can be changed using the --logindir option to medley. Local Installation In a local installation, the Medley system is installed into any user directory from a .tar file. Multiple “Medleys” can be installed in different directories on one machine without interference (except see description of Medley LOGINDIR below). Local installation makes it easy (from a file management p.o.v.) to modify the Medley system code.\nLocal installation doesn’t involve a package manager, so you are responsible for installing any prerequisite packages onto your system before you installing Medley.\nAlso note that with local installations, man medley will not work. However, as indicated below, ./medley --man will show the medley man page.\nTo install and run Medley locally: Install prerequite packages\nFor non-WSL installations, use your distro’s package manager to install xdg-utils.\nFor WSL all installations, use your distro’s package manager to install wslu.\nNote that some distros do not include wslu in their standard repos. See https://wslutiliti.es/wslu/install.html for installation instructions if this is the case.\nAlso note that wslu v4.0 does not work with Medley, so you will need to install either a version \u003c v.40 or \u003e= v4.1.\nFor WSL installations where the VNC feature will be used, install the tigervnc-standalone-server and tigervnc-xorg-extension packages.\nWhen using the VNC feature Medley will display in a VNC Window instead of a standard X Window. This is useful on high resolution displays since the VNC window will scale according to the Windows Settings-\u003eDisplay-\u003eScale setting, while the X Window on WSL will not so scale.\nNote that Medley will install and run even if none of these prerequite packages are installed. However, some features (e.g., viewing documentation in an external browser) will be inoperable.\nDownload\nUsing a browser download from the Medley downloads site the tar (.tgz) file for your platform (i.e., “standard” Linux or WSL) and your machine architecture (X86_64, ARM64, or ARMv7) to \u003ctar_filepath\u003e.\nNote that on WSL, \u003ctar_filepath\u003e will depend on whether the browser was started in Windows or in WSL. If downloading to the standard Downloads folder, using a WSL-based browser \u003ctar_filepath\u003e will be in ~/Downloads. If using a Windows-based browser, \u003ctar_filepath\u003e will be in /mnt/c/Users/\u003cusername\u003e/Downloads.\nInstall Medley\nIn a terminal:\nubuntu@oio:~$ mkdir \u003cinterlisp_directory\u003e ubuntu@oio:~$ tar -C \u003cinterlisp_directory\u003e -xzf \u003ctar_filepath\u003e Run Medley\nIn a terminal:\nubuntu@oio:~$ cd \u003cinterlisp_directory\u003e/medley ubuntu@oio:~$ ./medley There are many options to the medley command. For a brief overview, run ./medley --help. For a more complete description, run ./medley --man or click here.\nFor first-time users: ./medley --apps or for WSL (and you have installed the VNC prerequisites) ./medley --apps --vnc is a good starting point. This will give you a fully populated Medley system, including the applications built on Medley such as Notecards and Rooms.\nNotes: By default, medley will create a directory in $HOME/il. This will be used by the Medley system as its LOGINDIR. Medley will start up LOGINDIR as its current connected directory. It will load any personal init file from LOGINDIR/INIT or LOGINDIR/INIT.LCOM. Finally, Medley will use LOGINDIR/vmem/ to store its virtual memory file(s). The location of LOGINDIR can be changed using the --logindir option to medley. In particular, if you have multiple installations of Medley that you would like to keep completely seperate, then you can use the --logindir - option, which will set LOGINDIR to \u003cmedley_directory\u003e/logindir. ","categories":"","description":"","excerpt":"Medley can run on any Linux system that includes X Windows, including …","ref":"/running/running-on-linux/","tags":"","title":"Running on Linux (incl. WSL)"},{"body":"The Medley Interlisp Project has joined (as an “implementation sponsor”) the Software Preservation Network. SPN is a coordinated, distributed effort to ensure long term access to software through community engagement, infrastructure support and knowledge generation. See Interlisp and SPN for more information.\nSPN is hosted by the Educopia Institute.\nThey recommended the following resources:\nCommunity Cultivation Framework: a framework for thinking through a community’s development. Vision in Formation: “Articulating Your Community’s Purpose”: A community facilitator’s guide around starting those mission, vision, and values statements, with templates, including sample agendas, forms, and boilerplate email text. “It Takes a Village”: Tools for planning sustainability for open source software initiatives serving cultural and scientific heritage organizations. The Community Tool Box: templates and advice around community assessment, developing strategic plans and organizational structure, and building community. ","categories":"","description":"","excerpt":"The Medley Interlisp Project has joined (as an “implementation …","ref":"/about/partners/spn/","tags":"","title":"Software Preservation Network"},{"body":"Get an Interlisp Exec (REPL) Click and hold the right mouse button on the background, hover over EXEC, move to the right, go to “Interlisp”, release the right mouse button.\nIncrease the font size In an Interlisp Exec, type one of the following:\n(FONTSET 'BIGGER) (FONTSET 'HUGE) New windows and future lines in the Exec will now be in a larger font.\nEdit a function definition To edit the definition of a function FOO, type into an Interlisp Exec:\n(DF FOO) This will let you draw out a new SEdit window, which you can use to edit the code.\nMiddle-click in the titlebar to get additional options.\n","categories":"","description":"","excerpt":"Get an Interlisp Exec (REPL) Click and hold the right mouse button on …","ref":"/docs/medley/tips/","tags":"","title":"Tips"},{"body":" Link to tweet Link to tweet Link to tweet Link to tweet Link to tweet Link to tweet Link to tweet ","categories":"","description":"Comments about the Medley Interlisp project","excerpt":"Comments about the Medley Interlisp project","ref":"/about/twitter/","tags":"","title":"Twitter Reviews"},{"body":"InterlispOrg Inc has beem formed as a non-profit corporation in California.\nWe have been approved by the IRS for 501(c)3 status, and the California FTB for tax-free status. We have an EIN number assigned. We have a bank account. We can accept donations that may be tax-deductable for the donor. The simplest way to do so is using the GitHub Sponsor mechanism.\nThe name of the organization is “InterlispOrg Inc” (no punctuation). The board of directors met and, among other things, approved bylaws. It is not a membership organization.\nThere are three directors on the Board of Directors:\nLarry Masinter (President) Ron Kaplan (Treasurer) Herb Jellinek (Secretary) The charitable purpose of the organization is Scientific and, in particular, Computer Science research. The principal activity is to “develop demonstrations of software ideas based on Interlisp”.\nThe reason for going through this rigamarole is to allow charitable donations, to sustain our Interlisp Online service, to hold copyright and licenses. There are also unanticipated benefits of discounts and service credits available to non-profits.\n","categories":"","description":"","excerpt":"InterlispOrg Inc has beem formed as a non-profit corporation in …","ref":"/about/partners/interlisporg-inc/","tags":"","title":"InterlispOrg"},{"body":"There are different ways of running Medley Interlisp on a wide variety of systems. This section lays out the basics to help you choose:\nInterlisp Online for most systems; see caveats In a Docker container currently windows x86_64 only Download and install from a release Running on Mac Running on Windows For Windows 10 or 11 with WSL1 or WSL2 Running on Linux For other OS or machine architectures, You can (re)build the virtual machine emulator (Maiko) from sources, and then run in a release or even build your own images (sysouts).\nSee README.md files in the GitHub repo.\n","categories":"","description":"","excerpt":"There are different ways of running Medley Interlisp on a wide variety …","ref":"/running/","tags":"","title":"Running Medley Interlisp"},{"body":"DRAFT – This page is currently being revised.\nonline requires a recent version of Safari or Chrome or Firefox.\ndocker desktop Running with Docker Desktop is an option, but installing locally is better.\nInstall from release We don’t have it build automation yet, but usually a release will include a build for darwin.aarch64.\ninstall medley from release, build maiko Need XCode Need XQuartz installed before you build maiko (includes XClient libraries).\nRequirements Intel or M1/M2 Macintosh (or even older) XQuartz Macintosh X server for your OS/mac vintage) XQuartz settings emulate 3-button mouse\n","categories":"","description":"","excerpt":"DRAFT – This page is currently being revised.\nonline requires a recent …","ref":"/running/running-on-mac/","tags":"","title":"Running on MacOS"},{"body":"Medley does not yet run as a native Windows application. Besides online, and running with Docker Desktop, you can run Medley on Windows 10/11 using Windows System For Linux (WSL1 or WSL2).\nThis methods requires the installation (if not already installed) of one additional component to your Windows system - WSL.\nOn Windows, Medley requires a 64-bit machine.\nRunning on Windows with WSL Medley will run on either WSL1 or WSL2. WSL2 is preferred, but for older machines that do not support virtualization (see here) or Windows builds prior to Windows 10 Build 19041, WSL1 will work just fine although it will be limited to the VNC mode (see below).\nWhen running under WSL2, Medley can display in one of two ways: in an X-Window (using the X_Windows server built-in to WSL2) or in a VNC-viewer Window. Although the X-windows approach is simpler (i.e., behind the scenes) it does not scale well on high-DPI displays. In VNC mode, the Medley window will scale according to the Windows Display Scale settings. The X vs Vnc mode is set on using the --vnc flag on the medley command line. When running on WSL1, Vnc mode is always used.\nTo install an run Medley with WSL: Install WSL: See here for instructions on installing WSL.\nInstall medley within WSL: Once WSL is installed, open a terminal to WSL (e.g., by typing “wsl” in a command or powershell window) and follow the instructions for installing and running Medley on Linux that can be found here.\nRun Medley: Once Medley has been installed on WSL, you can run medley from either a WSL terminal as described in the Running Medley on Linux instructions (here) or by typing wsl medley \u003cflags and options\u003e in a Command or Powershell window.\nDocumentation for the \u003cflags and options\u003e to the medley command can be found here\nFor first-time users: wsl medley --vnc --apps --interlisp --noscroll or, equivalently, wsl medley -v -a -e -n is a good starting point. This will give you a fully populated Medley system, including the applications built on Medley such as Notecards and Rooms.\nNotes: If Medley for Docker (see below) is also installed on the system, you can also start Medley by typing medley --wsl \u003cdistro\u003e \u003cflags and options\u003e in a Command or Powershell window. This is equivalent to the wsl medley \u003cflags and options\u003e command described above. Running on Windows with Docker Desktop When running with Docker, Medley runs in a Docker container using the Interlisp/medley image found on Docker Hub. A VNC Viewer window is used to display the Medley desktop. All of this is started up using the single medley command.\nTo install an run Medley with Docker Desktop: Install Docker Desktop: Install Docker Desktop for Windows as described here.\nInstall Medley: To install Medley, download and run the the medley-install_\u003cversion\u003e.exe that can be found here under the Windows 10/11 heading.\nThis will install Medley on your system, by default in the %USERPROFILE%/AppData/Local/Medley/Scripts folder. This folder will be added to your %PATH%. An uninstall will also be added so that you can remove Medley via the standard Add/Remove Programs control panel.\nNote that to download medley-install_\u003cversion\u003e.exe, you may have to bypass any security concerns your browser has about downloading an .exe file. In addition, you will have to bypass the Windows Defender protection against executing an unsigned .exe. To do so, click More info followed by Run Anyway when the Windows Defender window pops up.\nRun Medley: Once it is installed, you can run Medley by typing medley \u003cflags and options\u003e into either a Command or a Powershell window.\nDocumentation for the \u003cflags and options\u003e to the medley command can be found here\nFor first-time users: medley --apps --interlisp --noscroll or, equivalently, medley -a -e -n is a good starting point. This will give you a fully populated Medley system, including the applications built on Medley such as Notecards and Rooms.\nNotes: Docker needs to be installed and running in order to run Medley. However, the Docker Dashboard window does not be open. You can check the state and start/stop Docker by right clicking on the Docker icon in the System Tray.\nThe first time it runs, medley will automatically pull the latest Interlisp/medley docker image from Docker Hub. It will use this docker image for all subsequent runs unless the ‘–update’ flag is raised. When –update is raised, medley will once again pull the latest Interlisp/medley docker image.\nWhen running with Docker, the Medley file system is for the most part “within” the Docker container. This means that it is deleted whenever Medley stops and is recreated whenever Medley restarts. The exception is the directory /home/medley/il (in the Medley file system) which is automatically mapped by medley to a directory in the host Windows file system, by default to %USERPROFILE%/AppData/Local/Medley/il folder. You can change this mapping to a different windows folder using the --logindir option to medley.\n","categories":"","description":"","excerpt":"Medley does not yet run as a native Windows application. Besides …","ref":"/running/running-on-win/","tags":"","title":"Running on Windows 10/11"},{"body":"Running on Windows with Docker Desktop When running with Docker, Medley runs in a Docker container using the Interlisp/medley image found on Docker Hub. A VNC Viewer window is used to display the Medley desktop. All of this is started up using the single medley command.\nThese instructions are for Windows 10 or 11 (x86_64) only.\nTo install and run Medley with Docker Desktop: Install Docker Desktop: Install Docker Desktop for Windows as described here.\nInstall Medley: To install Medley, download and run the the medley-install_\u003cversion\u003e.exe that can be found here under the Windows 10/11 heading.\nThis will install Medley on your system, by default in the %USERPROFILE%/AppData/Local/Medley/Scripts folder. This folder will be added to your %PATH%. An uninstall will also be added so that you can remove Medley via the standard Add/Remove Programs control panel.\nNote that to download medley-install_\u003cversion\u003e.exe, you may have to bypass any security concerns your browser has about downloading an .exe file. In addition, you will have to bypass the Windows Defender protection against executing an unsigned .exe. To do so, click More info followed by Run Anyway when the Windows Defender window pops up.\nRun Medley: Once it is installed, you can run Medley by typing medley \u003cflags and options\u003e into either a Command or a Powershell window.\nDocumentation for the \u003cflags and options\u003e to the medley command can be found here\nFor first-time users: medley --apps --interlisp --noscroll or, equivalently, medley -a -e -n is a good starting point. This will give you a fully populated Medley system, including some applications built on Medley such as Notecards and Rooms.\nNotes: Docker needs to be installed and running in order to run Medley. However, the Docker Dashboard window does not be open. You can check the state and start/stop Docker by right clicking on the Docker icon in the System Tray.\nThe first time it runs, medley will automatically pull the latest Interlisp/medley docker image from Docker Hub. It will use this docker image for all subsequent runs unless the ‘–update’ flag is raised. When –update is raised, medley will once again pull the latest Interlisp/medley docker image.\nWhen running with Docker, the Medley file system is for the most part “within” the Docker container. This means that it is deleted whenever Medley stops and is recreated whenever Medley restarts. The exception is the directory /home/medley/il (in the Medley file system) which is automatically mapped by medley to a directory in the host Windows file system, by default to %USERPROFILE%/AppData/Local/Medley/il folder. You can change this mapping to a different windows folder using the --logindir option to medley.\n","categories":"","description":"","excerpt":"Running on Windows with Docker Desktop When running with Docker, …","ref":"/running/running-with-docker/","tags":"","title":"Running with Docker Desktop"},{"body":"Medley Interlisp is open-source and may be obtained from GitHub. It is portable to many different Linux and Apple MacOS systems, as well as Windows using WSL2.\nThe core is written in portable C. The system currently depends on an X11 system for its display.\nObtaining The System The system comes in two parts. The first is a C-based virtual machine Maiko.\nThe remainder of the system is OS / architecture-independent and can be found in the Medley repository.\nYou can now download Medley Interlisp from a release without building anything; see the Medley README\nSee The Maiko README for build instructions for Maiko, for systems for which there is no pre-built release.\n(See Medley repo README for instructions on getting Medley. Make sure you have an X-server running to manage the Medley Interlisp display, and the DISPLAY environment variable set to point to your X-server.\nRunning Medley can be done by typing:\n$ cd medley $ ./run-medley Or, if you wish to start Medley up with a particular image file (SYSOUT):\n$ cd medley $ ./run-medley \u003cSYSOUT-file-name\u003e The first time the system is run it loads the system image that comes with the system. When you exit the system (or “do a SaveVM” menu option) the state of your machine is saved in a file named ~/lisp.virtualmem. Subsequent system startups load the ~/lisp.virtualmem image by default.\nExiting The System The system may be exited from an Interlisp prompt by typing:\n(LOGOUT) Or from a Common Lisp prompt with:\n(IL:LOGOUT) When you logout of the system, Medley automatically creates a binary dump of your system located in your home directory named ``lisp.virtualmem’’. The next time you run the system, if you don’t specify a specific image to run, Medley restores that image so that you can continue right where you left off.\n","categories":"","description":"","excerpt":"Medley Interlisp is open-source and may be obtained from GitHub. It is …","ref":"/doc/build.html","tags":"","title":"Building the Interlisp system"},{"body":"DRAFT – This page is currently being revised.\nThis page should contain instructions on using GitHub to clone repos, review issues, using GITFNS, loading exports.all ….\nOr pointers to the documents in the repository\n","categories":"","description":"","excerpt":"DRAFT – This page is currently being revised.\nThis page should contain …","ref":"/developing/","tags":"","title":"Developing Medley Interlisp"},{"body":"On-line reference pages A Brief History of Interlisp The Basics of Interlisp Medley Interlisp References Medley for the Sun Workstation User’s Guide Medley Primer Interlisp Books Interlisp - The Language and Its Usage Medley Interlisp: Interactive Programming Environment (derived from Interlisp-D) Medley Interlisp: Interactive Programming Tools (derived from Interlisp-D) (1993) Interlisp Reference Manual Unsorted documentation content Most Interlisp/Medley documentation was written using the Medley Text Editor, one of the first WYSIWYG graphical user interface text editors, called TEdit. Written in and for Interlisp users, it features muliple fonts, embedded graphics including line drawings and raster images.\nTEdit files are scattered through the the various Interlisp repositories. For the convenience of those who would rather read the files using more modern tools, see the files from different Medley Interlisp repositories, converted to PDF.\nFor the searcher’s conveneience, these have also been combined into searchable PDFs named All-*-PDFs.pdf.\n","categories":"","description":"","excerpt":"On-line reference pages A Brief History of Interlisp The Basics of …","ref":"/documentation/","tags":"","title":"Documentation"},{"body":"We are using Zotero to create a detailed bibliography of works documenting Lisp, Interlisp and the results of projects and related activities.\nZotero Bibliography The following table represents a snapshot of the data within Zotero:\nBibliography ","categories":"","description":"","excerpt":"We are using Zotero to create a detailed bibliography of works …","ref":"/publications/","tags":"","title":"Publications"},{"body":"Interlisp has benefited by the contributions of many people over the years.\nThe Medley Interlisp Project has benefited from the contribution of many people, including:\nLarry Masinter Rob Kaplan Nick Briggs Frank Halasz Herb Jellinek Steve Kaisler Wayne Marci Paul McJones Bruce Mitchener John Cowan Arun Welch Michele Denber Blake McBride Abe Jellinek Bill Stumbo with recent additions from\nMatt Heffron D Van Buer Eric Kaltman Morgan McMurray ","categories":"","description":"","excerpt":"Interlisp has benefited by the contributions of many people over the …","ref":"/credits/","tags":"","title":"Credits"},{"body":"\nWhat is Medley Interlisp? Interlisp is a software development environment, originating from Xerox PARC in the 1970s and 1980s. supporting software research in AI, computational linguistics, graphical user interfaces, hypertext, and other research areas. Software development in Interlisp-D is a different experience than is common, even today. The features of structure editing, source code management, code analysis and cross-referencing combined to support rapid incremental development. The 1992 ACM Software System Award was awarded to the Interlisp system for pioneering work in programming environments.\nInterlisp evolved from an interactive terminal style programming tool to Interlisp-D – GUI and the entire operating system for the Xerox Lisp machines (called D-machines, named Dorado, Dolphin, Dandelion, Daybreak) with a common byte-code virtual machine. The virtual machine was then ported to C for Sun Unix and many other Unix systems, and the system was extended to support the Common Lisp standard as well.\nDevelopment of the system moved from Xerox PARC to a Xerox AI Systems division, to a spin-out company called Envos, to a smaller company called Venue. The system was called Interlisp, Interlisp-D, and various named releases (Koto, Lyric, Medley) until the name “Medley” was used for the whole thing. More background.\nWhat are we trying to accomplish? We aim to revive Medley Interlisp to support not just a demo or test drive but actual use as a development and learning tool. To make the software usable, we need to overcome a number of compatibility problems with current systems and interfaces.\nWe also want to restore and present earlier versions of Interlisp, for the student of computer history. See Interlisp and Software Preservation Network for more.\nWhat have we done so far? There has been a lot of cleanup and adaptation to make it usable again in the modern world. Among other developments, you can now run Medley Interlisp on many OS and hardware configurations, or at https://online.interlisp.org in the cloud, using a web browser. See our 2021 Annual Report, Project News, and recent release notes . We’ve also been working on integration of the Interlisp style development with git and GitHub, Docker and other modern components.\nWho is involved? We are some of the original developers and users of the system 30 years ago, joined by newcomers interested in software history and preservation, along with members of the Lisp community. We work with organizational partners. And with you! See Get Involved for ways to get involved.\nTestimonials What have we lost? A presentation from the 2020 Remote Chaos Experience conference highlights some of the interesting aspects of Interlisp. The presentation synopsis states it this way:\nWe have ended up in a world where UNIX and Windows have taken over, and most people have never experienced anything else. Over the years, though, many other system designs have come and gone, and some of those systems have had neat ideas that were nevertheless not enough to achieve commercial success. We will take you on a tour of a variety of those systems, talking about what makes them special.\n","categories":"","description":"","excerpt":"\nWhat is Medley Interlisp? Interlisp is a software development …","ref":"/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/","tags":"","title":""},{"body":"2022 Meeting Agendas and Notes Every Monday 10:00am PT Zoom ID: 408 332 4290\nMeeting recordings contact @masinter for access.\nAgenda 2 May 2022 Round-table (let’s try starting with this) Open Source for Historical and Cultural communities – walkthrough this and other Educopia community resources Agenda 11 April 2022 notices to other organizations (S Kaisler) Web site organization (W.Marci? B.Stumbo) round table Agenda 28 March 2022 Review announcements and reactions. Time for broader announcements finally.\nAgenda 21 March 2022 Larry’s out this week, but there was sentiment to meet anyway, so click the Edit button and edit this page to add your agenda items.\nAgenda 14 March 2022 Let’s go through Documentation as well as open ‘Documentation’ issues and prioritize.\nAgenda 7 March 2022 Issue review for release announcement Let’s quickly go through open issues labeled ‘online’ for a status update SPN/Educopia consulting GITFNS Lispusers cleanup … Agenda 28 Feb 2022 Issue #707 online (what changes are needed before we announce?) Issue #680 Branding (Medley vs. Interlisp vs. Medley Interlisp) PR #706 rmk22 GitFns new version and call for review LispUsers cleanup (Issue #7) SPN announcement https://www.softwarepreservationnetwork.org/interlisp/ using keysyms vs. key numbers Agenda 21 Feb 2022 News (round table): online (open issues) GITFNS handling file moves SPN and spreading the news Branding and sponsors Pick an issue: using “pick-issue” we will pick an issue and work on it together. If we can close the issue in 20 minutes, fine, but otherwise we will just write up what we learned. (later I’ll extend pick-issue to pick Lispusers packages too). Agenda 14 Feb 2022 Happy Valentine’s day\nNew GitHub actions – how does it work? LispUsers review idea: 15 minute demos of Medley features (for later scripting and re-recording) Agenda 7 Feb 2022 Documentation (link from Interlisp.org). Moving obsolete / broken / unfixible files out of medley repo Using Lispusers Survey Agenda 31 Jan 2022 New user online experience (again) – Web site review round-table status and plans Agenda 24 Jan 2022 PR #646 rmk15 changes and features actions, online, docker: recent changes Agenda 17 Jan 2022 Monthly report for January Announcement to Computer History groups (Steve) see draft Round-table status and plans Agenda 10 Jan 2022 Three topics; half hour each.\nJoining SPN (as a member, a sponsor, or some other relation). See SPN membership proposal and here for context; with Jessica Farrell and Eric Kaltman. Interlisp Online (hopefully Frank) New User Getting Started (Bill and Steve) Agenda 3 Jan 2022 Happy New Year\nOnline status new user setup (promptwindow, helptime, dwimwait, break window size \u0026 auto bt payment set to use AWS $1k annual credit SDL Status Joining SPN (Visitors 10 Jan 2021) People/skills to hire? Videographer (plan, script, record, produce demos) Historian (bibliographer, Interlisp history) Lawyer (software preservation, Open source) ","categories":"","description":"","excerpt":"2022 Meeting Agendas and Notes Every Monday 10:00am PT Zoom ID: 408 …","ref":"/about/getinvolved/2022meetings/","tags":"","title":""},{"body":"NEED TO UPDATE\n","categories":"","description":"","excerpt":"NEED TO UPDATE\n","ref":"/faq/","tags":"","title":"FAQ"},{"body":"NOTE: Recent efforts have focused on developing a Zotero annotated bibliography; the idea is to focus the timeline on material and source code published at the time. Any narrative around that would then constitute secondary sources. That will allow future researchers to construct their own narratives.\nInterlisp Timeline This draft started with Teitelman’s History of Interlisp, Still need to merge in links from Software Preservation History, info-1100, and other sources. “facts” should be backed up by links to their sources.\n1960s Through the 1960s, the languages of programming were primarily Fortran and assembly. Lisp enabled expressing recursion simply. Lisp also provided the ability to modify a program as it was running, since Lisp programs were themselves data—the same as other list structures used to represent program data. This made Lisp an ideal language for writing programs that themselves constructed programs or proved things about programs. As an area of Artificial Intelligence, programs writing programs was something of great interest to those working on applying AI to programming.\nLisp was at that time just a language. Programming in Lisp consisted of submitting a job, usually as a deck of punched cards to run in batch mode on a mainframe. You could then pick up your output a few hours later, if lucky, otherwise the next day, and hope that it did not consist of a lengthy sequence of left parentheses or NILs, as would be the case if the program had certain kinds of bugs. 1964\nL. Peter Deutsch (high school student) developed PDP-1 Lisp at MIT.\nL. Peter Deutsch, quoted in lisp_doc.txt accompanying Bob Supnik’s Software Kit L. Peter Deutsch and Edmund C. Berkeley. The LISP Implementation for the PDP-1 Computer. March 1964, pages 326-375 in Berkeley and Bobrow. PDF: Describes Basic PDP-1 LISP in detail, including full PDP-1 assembly language source code. The introduction of time-sharing in the mid-60s changed the paradigm of software development. Instead of the developer doing their debugging offline, users could now interact directly with their program online. Time-sharing was originally developed as a way of making more efficient and economic use of a very expensive computer, but it also had the surprising side-effect of drastically reducing the amount of time it took to get a program working. Users experiencing this phenomenon reported that it was because they did not have to lose and then reestablish context so frequently, but could get very deep into their programs and the problems they presented, and stay there. The situation is analogous to trying to resolve an issue between two people via a conversation rather than sending letters back and forth. Regardless of how short the cycle of iteration is, e.g., if email is used instead of letters, if the process involves discovery and a lot of back-and-forth, it is much easier to do via a conversation. You could establish a context and stay focused until the problem was solved.\n1965 Teitelman’s experience with his Ph.D. work led him to the notion of building a system where the computer took an active role in helping make changes to a program. At the time, this was a very novel idea.\nThe term “programming environment” was meant to suggest not only the usual specifics of both a programming system and language but also more elusive and subjective considerations such as ease of use and level of interaction, “forgiveness” of errors, human engineering, and system “initiative.” The programmer’s environment influences and to a large extent determines, what sort of problems they can (and will want to) tackle, how far they can go, and how fast. If the environment is “cooperative” and “helpful”, then the programmer can be more ambitious and productive. If not, they will spend most of their time and energy “fighting” the system, which at times seems bent on frustrating one’s best efforts.\nIn 1965, there were very few tools for developing Lisp programs, and those that were available were very primitive.\n1966 MIT EE Dept PDP-36 LISP manual Teitelman started at Bolt, Beranek and Newman in Cambridge. At the time, BBN’s computer was a DEC PDP-1, and Daniel Murphy had written a version of Lisp 1.5 for it using ideas from Deutch’s work. This Lisp was really just a toy – single user, slow, small address space, but Teitelman started with Break and Prettyprint from MIT on his pursuit of a Lisp programming environment.\nhttp://www.softwarepreservation.org/projects/LISP/bbnlisp/BBN-LISP-System_Feb1966.pdf#page=49 1967 In 1967, BBN purchased an SDS 940 computer from Scientific Data Systems and began work building a time-sharing system on it. The SDS 940 had a larger address space and the ability to support a paging system. BBN was awarded an ARPA contract to provide a LISP system that could be distributed to other ARPA sites for doing A.I. research. (ARPA = Advanced Research Projects Administration of the Department of Defense.)\nImprovements to the 940 LISP Library Advising was a means of allowing the user to treat a particular function as a black box without knowing what was inside the box, wrap “advice” around it that could operate before the function ran, potentially changing its input parameters, after it ran, possibly changing its value, or { PrettyPrint which printed out a nicely formatted representation of Lisp programs, using indentation to indicate depth of structure. A Trace facility was also available which modified specified functions to print on the terminal their input parameters on entry and their value on exit. You could think of this as a special case of Advising. There was also a Break package which enabled the user to cause program execution to halt at the entry point to specific functions. The user could then examine the value of the function’s input parameters, and even change them, then cause the function to run, and again gain control so as to examine the value that the function returned or side effects of the function’s operation. The user could change input parameters and re-execute the function, or manually specify the desired value and have it be returned to the caller as though it had been the value produced by that function.\nTeitelman memo to SDS 940 LISP Users.\n1968 Work on Demand Paging software virtual memory was focused on supporting Lisp.\nPeter Deutsch wrote a structure editor in Lisp for editing Lisp programs. Prior to this, Lisp source was prepared and edited offline in textual form and read into the Lisp system. Peter’s editor enabled the user to edit Lisp programs without ever leaving Lisp. The editor provided operations for moving up, down, left or right in the list structure definition of a Lisp function, and to make insertions, deletions, or replacements, e.g. (-3 X) to insert X in front of the 3rd item in the current list, 2 to descend into the second item in the current list, 0 to ascend one level, etc. Other more sophisticated commands were soon added, such as a find command to search through all levels of the function being edited looking for a specified string or pattern, a mark command to mark, i.e. save, the current location, and a command to restore the context to one that had previously been marked, an ability to define macros, etc.\nThe ability to edit a Lisp program in situ meant that a user could modify a running program and continue execution. For example, the user might be at a Break, evaluate the current function, identify a problem, edit the definition using the structure editor, and reevaluate the current, now modified function and go on.\n1969 Alice K. Hartley took over Dan Murphy’s role in BBN-LISP. A number of new data types were added to augment lists and numbers: arrays, strings, large numbers, floating-point numbers.\n1970s 1970 As Lisp users began to write larger and larger programs, performance began to be an issue. A compiler had been available for Lisp programs since the early sixties.\nIn 1970, Danny Bobrow and Alice Hartley designed and implemented the “spaghetti stack”. This enabled running programs to search the current execution stack, e.g., find the second occurrence up the stack of the function FOO, and return the name of the function that called FOO, to alter the normal flow of control, e.g., return from a specified stack pointer a specified value (very useful when debugging programs in order to manually bypass a known problem), and to evaluate an expression or variable in a specified context, e.g., what is the value of x as of six function calls back up the stack.\nDWIM, the most well known, and in some cases reviled, feature of BBN-LISP was introduced in 1970. DWIM stands for Do-What-I-Mean and embodies Teitelman’s view that people’s time was more valuable/expensive than computer time. (This was a radical idea at the time.) When Teitelman first started programming in FORTRAN in 1960, he was appalled at receiving the error message, “on line 70, DIMENSION is misspelled”. If the FORTRAN compiler knew this to be the case, why didn’t it accept this and go on and compile his program?\nThe BBN-LISP interpreter was modified so that rather than signal an error when an undefined function or unset variable was encountered, DWIM would use various heuristics to identify and attempt to correct the error. Spelling correction was the most common scenario. An algorithm was implemented that took advantage of the most common types of errors made by a touch typist, e.g., doubled characters, transpositions, case error, etc.\nA spelling list appropriate for the context of the error was searched, and a metric computed for each item on the list that measured the difference between that item and the unknown word. If the match was sufficiently close, e.g., the only difference being a doubled character or a transposition, the correction was performed without the user having to approve. Otherwise, the user was offered the closest match and asked to approve the correction.\nIf the user approved or the correction was automatically done, a message was printed on the terminal and computation would continue as though the error had not occurred. If the user was not at the terminal, after an appropriate interval, DWIM would default to Yes or No depending on how close the match was. It was not uncommon for a user to perform some editing, then start a computation, go get some coffee, and come back to find the computation complete with several corrections having been made.\nDWIM could also handle the case where the user typed a number instead of ‘(‘ or ‘)’ because of failure to hit the shift key, e.g. 8COND instead of COND. This kind of error was particularly difficult to fix, because not only did it cause a misspelled function or variable, but totally altered the structure of the expression being evaluated. For the user to manually fix such an error using the structure editor required not only removing the 8 or 9, but rearranging the list structure. Having DWIM handle such errors was quite helpful.\nSpelling correction was also used in contexts besides evaluating Lisp expressions. For example, there was a spelling list of edit commands that was used to correct a mistyped editor command. When loading a file where the file name was not found, a spelling list of previously encountered file names would be used.\nAnother innovation introduced to BBN-LISP in 1970 was the History package. The idea was rather than simply performing the operations requested by the user, call functions, edit expressions, perform break commands, etc., and discarding that information, to have an agent that would record what the user entered so that the user could examine the history, and replay portions of it, possibly with substitutions. (The history feature of the UNIX C-shell introduced in the late 70’s was patterned after the Interlisp history package.) The history also contained any messages displayed to the user during the execution of the corresponding event, e.g., any DWIM corrections, or messages about global variables being reset or functions being redefined, etc. As with DWIM, the History package grew out of the desire to offload manual tasks to the computer.\nPerhaps the most important piece of information stored in each history event was the information required to UNDO that operation. This was especially valuable in the context of editing. UNDO is functionality that every user now expects in an editor, but it was first introduced in BBN-LISP in 1970. The UNDO functionality provided in BBN-LISP still surpasses that available in today’s editors in that the user could UNDO operations out of order. For example, after performing a series of four or five editing operations, the user could realize that the information deleted in the first operation is needed, and would be able to UNDO just that operation by explicitly referring to that operation using the history package, without affecting the intervening operations.\nIn addition to being able to UNDO edit operations, the user could also UNDO operations that were typed in at the top level or in a Break. This was most frequently used to undo assignments. It could also be used to undo an entire edit session, rather than undoing one command at a time, sort of a revert operation for S-expressions. The user could also arrange to have functions that they defined to be undoable by storing information on the history list.\n1971 The File Package was added in 1971. This was essentially a “make” for Lisp. The user could specify the set of functions, global variables, property lists, etc., to be contained in a specified file, and then “make” that file. When the file was loaded in a subsequent session, this information would be recorded and available. Whenever a component known to be in a specified file was modified, the system would know that the corresponding file needed to be rewritten. A cleanup function was provided that would write out all files that contained components that had been changed. The user would be informed about any items created or modified during the course of their session that did not appear in any of the user’s files, and therefore might be lost if the user abandoned their session without saving them somewhere. The only thing missing from the File Package that would be provided in UNIX Make was the notion of dependencies.\n1972 In 1972, Danny Bobrow and Warren Teitelman left BBN and went to the newly formed Xerox Palo Alto Research Center – PARC. BBN continued to provide the low-level support for the Lisp system, i.e., compiler, garbage collector, and all of the operating system interface, while the Lisp-based center of activity for the various packages and utilities moved to PARC. Both sites continued to be supported by ARPA, and to indicate this partnership and shared responsibility, BBN-LISP was renamed to be Interlisp.\nAround the ARPAnet, Interlisp continued to use the DEC PDP-10 as its principal platform.\n1973 “Interlisp Reference Manual, Acknowledgements and Background” (PDF). 1973. 1974 By 1974 a number of impressive extensions to Interlisp had been developed by Larry Masinter. These included a much more sophisticated version of Interlisp’s iterative statement, as well as a Record package that enabled a user to label various components of a list structure and refer to them by name, thereby eliminating the CADADRs and CDADDRs that made Lisp programs so difficult to read. The Record package also had the advantage that the user could change a record definition, and the program would automatically adopt the new structure. For example, if PERSON were defined as (RECORD PERSON (FIRSTNAME LASTNAME TITLE)), the expression (X:TITLE) would translate to (CADDR X). If the user later changed the definition of PERSON to (RECORD PERSON (FIRSTNAME INITIAL LASTNAME TITLE)), all expressions involving TITLE would automatically be retranslated to use CADDDR.\nInterlisp-10 sources from 1974 Masterscope would analyze a large program and build a database of relationships between the various components that could then be queried using a natural language front end. For example, WHO CALLS FOO AND USES MUMBLE, EDIT WHERE X IS USED FREELY AND Y IS BOUND, etc. As LISP programs became larger and more complex and were being built by teams of programmers, rather than a single programmer, functionality such as that provided by Masterscope was invaluable in understanding, maintaining, and extending programs.\n1975 By 1975, Interlisp had become so rich in functionality that it was clear that word of mouth was no longer sufficient and in depth documentation was needed, especially since there was a large and growing community of users at the various ARPA sites that had little or no direct contact with the developers of Interlisp at PARC and BBN. Work on the first Interlisp manual, which turned out to be a year long project. When completed, the manual was over 500 pages and heavily indexed. It was written using PUB, a text formatting program developed at Stanford by Dan Swinehart and Larry Tesler. (This was back in the days when the only WYSIWYG editor was PARC’s Bravo which ran only on the Alto.)\nThe fact that the manual was machine readable, and heavily indexed, meant Interlisp could use it to provide online help and documentation. The user could type in something like TELL ME ABOUT FILE PACKAGE and see on the terminal/screen the relevant text. In a break, the user could simply type ‘?’ and see an explanation of the input parameters for the current function.\n1976 In 1976, Dan Ingalls gave a presentation at PARC in which he demonstrated the first window system. Written in and for Smalltalk, the user interface and paradigm it provided for enabling the user to manage and work with multiple contexts was very compelling, and immediately inspired work to provide such a mechanism for Interlisp. At the time, although Peter Deutsch had developed a byte-coded instruction set for the Alto, it was under-powered for Lisp development.\nBob Sproull came up with the idea for what would turn out to be the first client-server window system: use the Alto as the window server and Interlisp running on the time-shared PDP-10 clone as the client. and develop a protocol for having Interlisp tell the Alto what to display, and for the Alto to tell Interlisp about mouse clicks. Bob developed the ADIS (for Alto Display) package and Teitelman wrote DLISP in Interlisp. DLISP included a window manager and windowing system that enabled overlapping windows, cut and paste, etc. J Moore implemented a text package that would support display and editing of text in windows. Teitelman demonstrated this functionality at IJCAI in 1977, and presented a paper, a Display Oriented Programmer’s Assistant.\n1979 In 1979, PARC began the design of the Dorado, a high performance personal workstation. The availability of the Dorado also made possible building a Lisp with a native display capability, which led to the Interlisp-D project.\n1980s Teitelman \u0026 Masinter, IEEE Computer, “The Interlisp Programming Environment” April 1981. 1983 Stanford University Medical Experiment Computer 1982 AAAI launch of 1108 (Dandelion) and 1132 (Dorado) AAAI82 AAAI82_1 AAAI82_10 AAAI82_11 AAAI82_12 AAAI82_13 AAAI82_14 AAAI82_15 AAAI82_2 AAAI82_2 AAAI82_3 AAAI82_4 AAAI82_5 AAAI82_6 AAAI82_7 AAAI82_8 AAAI82_9 1983 Chorus and Fugue Releases of Interlisp-D 1984 Carol Release? 1985 Harmony and Intermezzo releases Koto release (for Xerox 1186), some bits of Common Lisp 1987 Lyric release 1988 Medley 1.0 release. Medley supported all Sun’s running on SunOS, plus IRIX, AIX, HPUX, Ultrix, (i.e., BSD Unix) 1989 Envos formed from XAIS April 10, Envos closes 1990s 1991 August: Venue moves to new offices [Arun Welch email] 3-byte atoms 1992 Medley 2.0 with CLOS, MOP, for Dos 4.0 and Xerox 1186 ACM Software Systems award was given to the Interlisp team: “For their pioneering work in programming environments that integrated source-language debuggers, fully compatible integrated interpreter/compiler, automatic change management, structure-based editing, logging facilities, interactive graphics, and analysis/profiling tools in the Interlisp system.” 1993 2000 The ADVISE/advice idea and names carried through to the Aspect/J system, and on into contemporary, mainstream Java frameworks.\ne.g. Spring: Chapter 6. Aspect Oriented Programming with Spring 2009 John Sybalsky obituary\n2010 Web Archive of Medley\nMEDLEY\nMedley provides a rich software development environment, including a debugger, a list structure editor, a file package, a compiler, text-editing facilities, and other useful tools. With any interactive computer language, the user interacts with the system through an “executive,” which interprets and executes commands. Medley includes three such executives: Common Lisp, Xerox Common Lisp, and Interlisp. Medley is a programming system, containing not only a programming language but also many predefined programs and specialized programming tools.\nMedley’s interactive window-based debugger automatically appears when an error occurs. You can enter the debugger through a program execution error, a user-entered keyboard interrupt, or a programmer-specified break. When execution is halted for one of these reasons, the user can reset the system and unwind the stack, or enter the debugger. The break window is an executive window; you can perform any activity here that you can in other executive windows, including looking at the program’s current state, changing data structures, evaluating expressions changing a function, and calling the editor. These break facilities, familiar to Interlisp users, are now in the common Lisp executive as well.\nThe programmer’s assistant. This tracks the user’s actions during a session, allowing them to be replayed, undone, or altered. The most common interaction with the programmer’s assistant occurs at the top level read-evaluate-print loop or in a break, where the user types in expressions for evaluation and sees the value printed out.\nThe file package and compiler. The file browser provides a convenient user interface for manipulating files stored on a workstation or file server. The makefile option in the file package lets you compile an entire file. You can compile individual functions using the compile command for functions in memory, the Tcompl command for definitions stored in files, or the Recompile command for a combination of in-memory and file definitions. Medley also supports block compiling. The Spy tool lets you identify program bottlenecks. Structure and text editors. Medley offers a choice of structure (list) editors. Dedit and Sedit. When loaded, the Dedit library utility becomes the default structure editor. Sedit does not have the type-in buffer of Dedit; it automatically places Lisp structures that the user fills in by selecting a character or a structure. Sedit recognizes Lisp functions such as single quotes, back quotes, and commas. It automatically adds spaces to maintain legal structures. Medleys Tedit supports multiple fonts, embedded graphics, and document formatting. Figures created with the drawing program, Sketch, can also take screen snapshots.\nNOTECARDS\nNotecards tool collects, organizes, and presents hypermedia information. Many cards can be displayed at once, and each can contain text, sketches, or scanned graphics. Cards are connected by typed links and stored in “file boxes.”\nLOOPS\nLisp Object-Oriented Programming System\nObjects give you a lot of power, but they’re not the whole answer. Sometimes, other ways of looking at a problem will work better. At times, plain procedural programming is best. Other times, you’ll want to trigger actions in response to changes in variables’ values. Yet other times, you’ll want to use rules to capture domain specific knowledge. LOOPS gives you all of these in one coherent package. LOOPS also gives you development tools that really help you while you work. You’ll want to keep track of the classes and objects you’ve created. LOOPS’ browsers let you do that. You’ll want to watch your rules in operation to find out where they’re going awry. LOOPS’ rule auditing facility lets you do that.\nBig systems often have many objects that start out the same, and slowly diverge as the system runs. Normally, you’d have to start off with completely separate objects, at a tremendous cost in memory. LOOPS lets you start with only a single real object. All the others are tiny “virtual copies” of that one. Each copy grows only as you change the values of its instance variables. The effect is the same as having many independent objects, without the memory cost.\nThe classes and objects you create are the same blocks LOOPS is built out of. So the classes you create can be combined with LOOPS itself to extend its power. You wind up with a system that speaks your language and has tools to fit your needs-and your specialized tools have become part of LOOPS, so its power is brought to bear to solve your problem.\n“Medley is and has been a system before its time. Through the debuggers, the graphics and window systems, and the organized structure of the underlying Lisp systems, Medley provides a marvelous tool that creates enthusiasm and motivation for programmers, applications builders, application users, teachers, and students alike.”\nPatrick Goddi and Anne M. Keuneke\n2019 Jill Marci Sybalsky obituary\n2020 Medley Interlisp project begins\n","categories":"","description":"","excerpt":"NOTE: Recent efforts have focused on developing a Zotero annotated …","ref":"/doc/info/history.html","tags":"","title":"History"},{"body":"The Interlisp todo list has moved to the Interlisp issue tracker.\n","categories":"","description":"","excerpt":"The Interlisp todo list has moved to the Interlisp issue tracker.\n","ref":"/doc/todo.html","tags":"","title":"Interlisp Wish List"},{"body":"","categories":"","description":"","excerpt":"","ref":"/misc/","tags":"","title":"Misc"}]